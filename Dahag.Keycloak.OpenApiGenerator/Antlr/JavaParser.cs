//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/git/external/keycloak-openapi/Dahag.Keycloak.OpenApiGenerator\JavaParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class JavaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXTENDS=17, FINAL=18, FINALLY=19, FLOAT=20, FOR=21, IF=22, GOTO=23, 
		IMPLEMENTS=24, IMPORT=25, INSTANCEOF=26, INT=27, INTERFACE=28, LONG=29, 
		NATIVE=30, NEW=31, PACKAGE=32, PRIVATE=33, PROTECTED=34, PUBLIC=35, RETURN=36, 
		SHORT=37, STATIC=38, STRICTFP=39, SUPER=40, SWITCH=41, SYNCHRONIZED=42, 
		THIS=43, THROW=44, THROWS=45, TRANSIENT=46, TRY=47, VOID=48, VOLATILE=49, 
		WHILE=50, MODULE=51, OPEN=52, REQUIRES=53, EXPORTS=54, OPENS=55, TO=56, 
		USES=57, PROVIDES=58, WITH=59, TRANSITIVE=60, VAR=61, YIELD=62, RECORD=63, 
		SEALED=64, PERMITS=65, NON_SEALED=66, DECIMAL_LITERAL=67, HEX_LITERAL=68, 
		OCT_LITERAL=69, BINARY_LITERAL=70, FLOAT_LITERAL=71, HEX_FLOAT_LITERAL=72, 
		BOOL_LITERAL=73, CHAR_LITERAL=74, STRING_LITERAL=75, TEXT_BLOCK=76, NULL_LITERAL=77, 
		LPAREN=78, RPAREN=79, LBRACE=80, RBRACE=81, LBRACK=82, RBRACK=83, SEMI=84, 
		COMMA=85, DOT=86, ASSIGN=87, GT=88, LT=89, BANG=90, TILDE=91, QUESTION=92, 
		COLON=93, EQUAL=94, LE=95, GE=96, NOTEQUAL=97, AND=98, OR=99, INC=100, 
		DEC=101, ADD=102, SUB=103, MUL=104, DIV=105, BITAND=106, BITOR=107, CARET=108, 
		MOD=109, ADD_ASSIGN=110, SUB_ASSIGN=111, MUL_ASSIGN=112, DIV_ASSIGN=113, 
		AND_ASSIGN=114, OR_ASSIGN=115, XOR_ASSIGN=116, MOD_ASSIGN=117, LSHIFT_ASSIGN=118, 
		RSHIFT_ASSIGN=119, URSHIFT_ASSIGN=120, ARROW=121, COLONCOLON=122, AT=123, 
		ELLIPSIS=124, WS=125, COMMENT=126, LINE_COMMENT=127, IDENTIFIER=128;
	public const int
		RULE_compilationUnit = 0, RULE_packageDeclaration = 1, RULE_importDeclaration = 2, 
		RULE_typeDeclaration = 3, RULE_modifier = 4, RULE_classOrInterfaceModifier = 5, 
		RULE_variableModifier = 6, RULE_classDeclaration = 7, RULE_typeParameters = 8, 
		RULE_typeParameter = 9, RULE_typeBound = 10, RULE_enumDeclaration = 11, 
		RULE_enumConstants = 12, RULE_enumConstant = 13, RULE_enumBodyDeclarations = 14, 
		RULE_interfaceDeclaration = 15, RULE_classBody = 16, RULE_interfaceBody = 17, 
		RULE_classBodyDeclaration = 18, RULE_memberDeclaration = 19, RULE_methodDeclaration = 20, 
		RULE_methodBody = 21, RULE_typeTypeOrVoid = 22, RULE_genericMethodDeclaration = 23, 
		RULE_genericConstructorDeclaration = 24, RULE_constructorDeclaration = 25, 
		RULE_fieldDeclaration = 26, RULE_interfaceBodyDeclaration = 27, RULE_interfaceMemberDeclaration = 28, 
		RULE_constDeclaration = 29, RULE_constantDeclarator = 30, RULE_interfaceMethodDeclaration = 31, 
		RULE_interfaceMethodModifier = 32, RULE_genericInterfaceMethodDeclaration = 33, 
		RULE_interfaceCommonBodyDeclaration = 34, RULE_variableDeclarators = 35, 
		RULE_variableDeclarator = 36, RULE_variableDeclaratorId = 37, RULE_variableInitializer = 38, 
		RULE_arrayInitializer = 39, RULE_classOrInterfaceType = 40, RULE_typeArgument = 41, 
		RULE_qualifiedNameList = 42, RULE_formalParameters = 43, RULE_receiverParameter = 44, 
		RULE_formalParameterList = 45, RULE_formalParameter = 46, RULE_lastFormalParameter = 47, 
		RULE_lambdaLVTIList = 48, RULE_lambdaLVTIParameter = 49, RULE_qualifiedName = 50, 
		RULE_literal = 51, RULE_integerLiteral = 52, RULE_floatLiteral = 53, RULE_altAnnotationQualifiedName = 54, 
		RULE_annotation = 55, RULE_elementValuePairs = 56, RULE_elementValuePair = 57, 
		RULE_elementValue = 58, RULE_elementValueArrayInitializer = 59, RULE_annotationTypeDeclaration = 60, 
		RULE_annotationTypeBody = 61, RULE_annotationTypeElementDeclaration = 62, 
		RULE_annotationTypeElementRest = 63, RULE_annotationMethodOrConstantRest = 64, 
		RULE_annotationMethodRest = 65, RULE_annotationConstantRest = 66, RULE_defaultValue = 67, 
		RULE_moduleDeclaration = 68, RULE_moduleBody = 69, RULE_moduleDirective = 70, 
		RULE_requiresModifier = 71, RULE_recordDeclaration = 72, RULE_recordHeader = 73, 
		RULE_recordComponentList = 74, RULE_recordComponent = 75, RULE_recordBody = 76, 
		RULE_block = 77, RULE_blockStatement = 78, RULE_localVariableDeclaration = 79, 
		RULE_identifier = 80, RULE_localTypeDeclaration = 81, RULE_statement = 82, 
		RULE_catchClause = 83, RULE_catchType = 84, RULE_finallyBlock = 85, RULE_resourceSpecification = 86, 
		RULE_resources = 87, RULE_resource = 88, RULE_switchBlockStatementGroup = 89, 
		RULE_switchLabel = 90, RULE_forControl = 91, RULE_forInit = 92, RULE_enhancedForControl = 93, 
		RULE_parExpression = 94, RULE_expressionList = 95, RULE_methodCall = 96, 
		RULE_expression = 97, RULE_pattern = 98, RULE_lambdaExpression = 99, RULE_lambdaParameters = 100, 
		RULE_lambdaBody = 101, RULE_primary = 102, RULE_switchExpression = 103, 
		RULE_switchLabeledRule = 104, RULE_guardedPattern = 105, RULE_switchRuleOutcome = 106, 
		RULE_classType = 107, RULE_creator = 108, RULE_createdName = 109, RULE_innerCreator = 110, 
		RULE_arrayCreatorRest = 111, RULE_classCreatorRest = 112, RULE_explicitGenericInvocation = 113, 
		RULE_typeArgumentsOrDiamond = 114, RULE_nonWildcardTypeArgumentsOrDiamond = 115, 
		RULE_nonWildcardTypeArguments = 116, RULE_typeList = 117, RULE_typeType = 118, 
		RULE_primitiveType = 119, RULE_typeArguments = 120, RULE_superSuffix = 121, 
		RULE_explicitGenericInvocationSuffix = 122, RULE_arguments = 123;
	public static readonly string[] ruleNames = {
		"compilationUnit", "packageDeclaration", "importDeclaration", "typeDeclaration", 
		"modifier", "classOrInterfaceModifier", "variableModifier", "classDeclaration", 
		"typeParameters", "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
		"enumConstant", "enumBodyDeclarations", "interfaceDeclaration", "classBody", 
		"interfaceBody", "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
		"methodBody", "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
		"constructorDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", 
		"interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
		"interfaceMethodDeclaration", "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
		"interfaceCommonBodyDeclaration", "variableDeclarators", "variableDeclarator", 
		"variableDeclaratorId", "variableInitializer", "arrayInitializer", "classOrInterfaceType", 
		"typeArgument", "qualifiedNameList", "formalParameters", "receiverParameter", 
		"formalParameterList", "formalParameter", "lastFormalParameter", "lambdaLVTIList", 
		"lambdaLVTIParameter", "qualifiedName", "literal", "integerLiteral", "floatLiteral", 
		"altAnnotationQualifiedName", "annotation", "elementValuePairs", "elementValuePair", 
		"elementValue", "elementValueArrayInitializer", "annotationTypeDeclaration", 
		"annotationTypeBody", "annotationTypeElementDeclaration", "annotationTypeElementRest", 
		"annotationMethodOrConstantRest", "annotationMethodRest", "annotationConstantRest", 
		"defaultValue", "moduleDeclaration", "moduleBody", "moduleDirective", 
		"requiresModifier", "recordDeclaration", "recordHeader", "recordComponentList", 
		"recordComponent", "recordBody", "block", "blockStatement", "localVariableDeclaration", 
		"identifier", "localTypeDeclaration", "statement", "catchClause", "catchType", 
		"finallyBlock", "resourceSpecification", "resources", "resource", "switchBlockStatementGroup", 
		"switchLabel", "forControl", "forInit", "enhancedForControl", "parExpression", 
		"expressionList", "methodCall", "expression", "pattern", "lambdaExpression", 
		"lambdaParameters", "lambdaBody", "primary", "switchExpression", "switchLabeledRule", 
		"guardedPattern", "switchRuleOutcome", "classType", "creator", "createdName", 
		"innerCreator", "arrayCreatorRest", "classCreatorRest", "explicitGenericInvocation", 
		"typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
		"typeList", "typeType", "primitiveType", "typeArguments", "superSuffix", 
		"explicitGenericInvocationSuffix", "arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", 
		"'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", 
		"'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", 
		"'transient'", "'try'", "'void'", "'volatile'", "'while'", "'module'", 
		"'open'", "'requires'", "'exports'", "'opens'", "'to'", "'uses'", "'provides'", 
		"'with'", "'transitive'", "'var'", "'yield'", "'record'", "'sealed'", 
		"'permits'", "'non-sealed'", null, null, null, null, null, null, null, 
		null, null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", 
		"'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", 
		"'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", "'->'", 
		"'::'", "'@'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
		"ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", 
		"IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
		"PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", 
		"SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", 
		"TRY", "VOID", "VOLATILE", "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", 
		"OPENS", "TO", "USES", "PROVIDES", "WITH", "TRANSITIVE", "VAR", "YIELD", 
		"RECORD", "SEALED", "PERMITS", "NON_SEALED", "DECIMAL_LITERAL", "HEX_LITERAL", 
		"OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", 
		"BOOL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
		"DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
		"LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", 
		"AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JavaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDeclarationContext moduleDeclaration() {
			return GetRuleContext<ModuleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaParser.Eof, 0); }
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 248;
					packageDeclaration();
					}
					break;
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IMPORT) {
					{
					{
					State = 251;
					importDeclaration();
					}
					}
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (CLASS - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (INTERFACE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (SEMI - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
					{
					{
					State = 257;
					typeDeclaration();
					}
					}
					State = 262;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263;
				moduleDeclaration();
				State = 264;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(JavaParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				{
				State = 268;
				annotation();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274;
			Match(PACKAGE);
			State = 275;
			qualifiedName();
			State = 276;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(JavaParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(JavaParser.MUL, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(IMPORT);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 279;
				Match(STATIC);
				}
			}

			State = 282;
			qualifiedName();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 283;
				Match(DOT);
				State = 284;
				Match(MUL);
				}
			}

			State = 287;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDeclaration);
		try {
			int _alt;
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case FINAL:
			case INTERFACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 289;
						classOrInterfaceModifier();
						}
						} 
					}
					State = 294;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 300;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 295;
					classDeclaration();
					}
					break;
				case ENUM:
					{
					State = 296;
					enumDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 297;
					interfaceDeclaration();
					}
					break;
				case AT:
					{
					State = 298;
					annotationTypeDeclaration();
					}
					break;
				case RECORD:
					{
					State = 299;
					recordDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
			return GetRuleContext<ClassOrInterfaceModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(JavaParser.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED() { return GetToken(JavaParser.SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSIENT() { return GetToken(JavaParser.TRANSIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(JavaParser.VOLATILE, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_modifier);
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case FINAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				classOrInterfaceModifier();
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				Match(NATIVE);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 307;
				Match(SYNCHRONIZED);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 308;
				Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 309;
				Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(JavaParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(JavaParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(JavaParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(JavaParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(JavaParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(JavaParser.STRICTFP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(JavaParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_SEALED() { return GetToken(JavaParser.NON_SEALED, 0); }
		public ClassOrInterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
		ClassOrInterfaceModifierContext _localctx = new ClassOrInterfaceModifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_classOrInterfaceModifier);
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				annotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				Match(PUBLIC);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314;
				Match(PROTECTED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 315;
				Match(PRIVATE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 316;
				Match(STATIC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 317;
				Match(ABSTRACT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 318;
				Match(FINAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 319;
				Match(STRICTFP);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 320;
				Match(SEALED);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 321;
				Match(NON_SEALED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(JavaParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableModifier);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FINAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324;
				Match(FINAL);
				}
				break;
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325;
				annotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(JavaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(JavaParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext[] typeList() {
			return GetRuleContexts<TypeListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList(int i) {
			return GetRuleContext<TypeListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMITS() { return GetToken(JavaParser.PERMITS, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(CLASS);
			State = 329;
			identifier();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 330;
				typeParameters();
				}
			}

			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 333;
				Match(EXTENDS);
				State = 334;
				typeType();
				}
			}

			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 337;
				Match(IMPLEMENTS);
				State = 338;
				typeList();
				}
			}

			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERMITS) {
				{
				State = 341;
				Match(PERMITS);
				State = 342;
				typeList();
				}
			}

			State = 345;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(LT);
			State = 348;
			typeParameter();
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 349;
				Match(COMMA);
				State = 350;
				typeParameter();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 356;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 358;
					annotation();
					}
					} 
				}
				State = 363;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 364;
			identifier();
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 365;
				Match(EXTENDS);
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 366;
						annotation();
						}
						} 
					}
					State = 371;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				State = 372;
				typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITAND() { return GetTokens(JavaParser.BITAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND(int i) {
			return GetToken(JavaParser.BITAND, i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			typeType();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITAND) {
				{
				{
				State = 376;
				Match(BITAND);
				State = 377;
				typeType();
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(JavaParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(JavaParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantsContext enumConstants() {
			return GetRuleContext<EnumConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(JavaParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(ENUM);
			State = 384;
			identifier();
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 385;
				Match(IMPLEMENTS);
				State = 386;
				typeList();
				}
			}

			State = 389;
			Match(LBRACE);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				State = 390;
				enumConstants();
				}
			}

			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 393;
				Match(COMMA);
				}
			}

			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 396;
				enumBodyDeclarations();
				}
			}

			State = 399;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public EnumConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnumConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnumConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantsContext enumConstants() {
		EnumConstantsContext _localctx = new EnumConstantsContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumConstants);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			enumConstant();
			State = 406;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 402;
					Match(COMMA);
					State = 403;
					enumConstant();
					}
					} 
				}
				State = 408;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumConstant);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 409;
					annotation();
					}
					} 
				}
				State = 414;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 415;
			identifier();
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 416;
				arguments();
				}
			}

			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 419;
				classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBodyDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(SEMI);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOID - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 423;
				classBodyDeclaration();
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(JavaParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext[] typeList() {
			return GetRuleContexts<TypeListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList(int i) {
			return GetRuleContext<TypeListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMITS() { return GetToken(JavaParser.PERMITS, 0); }
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(INTERFACE);
			State = 430;
			identifier();
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 431;
				typeParameters();
				}
			}

			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 434;
				Match(EXTENDS);
				State = 435;
				typeList();
				}
			}

			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PERMITS) {
				{
				State = 438;
				Match(PERMITS);
				State = 439;
				typeList();
				}
			}

			State = 442;
			interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(LBRACE);
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOID - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 445;
				classBodyDeclaration();
				}
				}
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 451;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyDeclarationContext[] interfaceBodyDeclaration() {
			return GetRuleContexts<InterfaceBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyDeclarationContext interfaceBodyDeclaration(int i) {
			return GetRuleContext<InterfaceBodyDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(LBRACE);
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DEFAULT - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOID - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 454;
				interfaceBodyDeclaration();
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 460;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_classBodyDeclaration);
		int _la;
		try {
			int _alt;
			State = 474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STATIC) {
					{
					State = 463;
					Match(STATIC);
					}
				}

				State = 466;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 470;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 467;
						modifier();
						}
						} 
					}
					State = 472;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				}
				State = 473;
				memberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericMethodDeclarationContext genericMethodDeclaration() {
			return GetRuleContext<GenericMethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericConstructorDeclarationContext genericConstructorDeclaration() {
			return GetRuleContext<GenericConstructorDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_memberDeclaration);
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476;
				methodDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477;
				genericMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 478;
				fieldDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 479;
				constructorDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 480;
				genericConstructorDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 481;
				interfaceDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 482;
				annotationTypeDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 483;
				classDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 484;
				enumDeclaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 485;
				recordDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaParser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			typeTypeOrVoid();
			State = 489;
			identifier();
			State = 490;
			formalParameters();
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 491;
				Match(LBRACK);
				State = 492;
				Match(RBRACK);
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 498;
				Match(THROWS);
				State = 499;
				qualifiedNameList();
				}
			}

			State = 502;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodBody);
		try {
			State = 506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504;
				block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(JavaParser.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTypeOrVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeTypeOrVoid);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508;
				typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterGenericMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitGenericMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericMethodDeclarationContext genericMethodDeclaration() {
		GenericMethodDeclarationContext _localctx = new GenericMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_genericMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			typeParameters();
			State = 513;
			methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterGenericConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitGenericConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstructorDeclarationContext genericConstructorDeclaration() {
		GenericConstructorDeclarationContext _localctx = new GenericConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_genericConstructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			typeParameters();
			State = 516;
			constructorDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public BlockContext constructorBody;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaParser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			identifier();
			State = 519;
			formalParameters();
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 520;
				Match(THROWS);
				State = 521;
				qualifiedNameList();
				}
			}

			State = 524;
			_localctx.constructorBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			typeType();
			State = 527;
			variableDeclarators();
			State = 528;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
			return GetRuleContext<InterfaceMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public InterfaceBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyDeclarationContext interfaceBodyDeclaration() {
		InterfaceBodyDeclarationContext _localctx = new InterfaceBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_interfaceBodyDeclaration);
		try {
			int _alt;
			State = 538;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DEFAULT:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case LT:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 530;
						modifier();
						}
						} 
					}
					State = 535;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				}
				State = 536;
				interfaceMemberDeclaration();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 537;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
			return GetRuleContext<GenericInterfaceMethodDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_interfaceMemberDeclaration);
		try {
			State = 548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540;
				constDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541;
				interfaceMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 542;
				genericInterfaceMethodDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 543;
				interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 544;
				annotationTypeDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 545;
				classDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 546;
				enumDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 547;
				recordDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclaratorContext[] constantDeclarator() {
			return GetRuleContexts<ConstantDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclaratorContext constantDeclarator(int i) {
			return GetRuleContext<ConstantDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_constDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			typeType();
			State = 551;
			constantDeclarator();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 552;
				Match(COMMA);
				State = 553;
				constantDeclarator();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 559;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		public ConstantDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterConstantDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitConstantDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorContext constantDeclarator() {
		ConstantDeclaratorContext _localctx = new ConstantDeclaratorContext(Context, State);
		EnterRule(_localctx, 60, RULE_constantDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			identifier();
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 562;
				Match(LBRACK);
				State = 563;
				Match(RBRACK);
				}
				}
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 569;
			Match(ASSIGN);
			State = 570;
			variableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceCommonBodyDeclarationContext interfaceCommonBodyDeclaration() {
			return GetRuleContext<InterfaceCommonBodyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_interfaceMethodDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 572;
					interfaceMethodModifier();
					}
					} 
				}
				State = 577;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			State = 578;
			interfaceCommonBodyDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(JavaParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(JavaParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(JavaParser.STRICTFP, 0); }
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_interfaceMethodModifier);
		try {
			State = 586;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 580;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 581;
				Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 582;
				Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 583;
				Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 584;
				Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 585;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericInterfaceMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceCommonBodyDeclarationContext interfaceCommonBodyDeclaration() {
			return GetRuleContext<InterfaceCommonBodyDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public GenericInterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericInterfaceMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterGenericInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitGenericInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
		GenericInterfaceMethodDeclarationContext _localctx = new GenericInterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_genericInterfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (DEFAULT - 1)) | (1L << (PUBLIC - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 588;
				interfaceMethodModifier();
				}
				}
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 594;
			typeParameters();
			State = 595;
			interfaceCommonBodyDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceCommonBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaParser.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public InterfaceCommonBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceCommonBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceCommonBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceCommonBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceCommonBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceCommonBodyDeclarationContext interfaceCommonBodyDeclaration() {
		InterfaceCommonBodyDeclarationContext _localctx = new InterfaceCommonBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_interfaceCommonBodyDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 597;
					annotation();
					}
					} 
				}
				State = 602;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 603;
			typeTypeOrVoid();
			State = 604;
			identifier();
			State = 605;
			formalParameters();
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 606;
				Match(LBRACK);
				State = 607;
				Match(RBRACK);
				}
				}
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 613;
				Match(THROWS);
				State = 614;
				qualifiedNameList();
				}
			}

			State = 617;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 70, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			variableDeclarator();
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 620;
				Match(COMMA);
				State = 621;
				variableDeclarator();
				}
				}
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 72, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			variableDeclaratorId();
			State = 630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 628;
				Match(ASSIGN);
				State = 629;
				variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			identifier();
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 633;
				Match(LBRACK);
				State = 634;
				Match(RBRACK);
				}
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 76, RULE_variableInitializer);
		try {
			State = 642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 640;
				arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case TEXT_BLOCK:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 641;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 78, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(LBRACE);
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LBRACE - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				State = 645;
				variableInitializer();
				State = 650;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 646;
						Match(COMMA);
						State = 647;
						variableInitializer();
						}
						} 
					}
					State = 652;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 653;
					Match(COMMA);
					}
				}

				}
			}

			State = 658;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 660;
			identifier();
			State = 662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 661;
				typeArguments();
				}
				break;
			}
			State = 671;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 664;
					Match(DOT);
					State = 665;
					identifier();
					State = 667;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
					case 1:
						{
						State = 666;
						typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 673;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(JavaParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeArgument);
		int _la;
		try {
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 674;
				typeType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					{
					State = 675;
					annotation();
					}
					}
					State = 680;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 681;
				Match(QUESTION);
				State = 684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDS || _la==SUPER) {
					{
					State = 682;
					_la = TokenStream.LA(1);
					if ( !(_la==EXTENDS || _la==SUPER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 683;
					typeType();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 84, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			qualifiedName();
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 689;
				Match(COMMA);
				State = 690;
				qualifiedName();
				}
				}
				State = 695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(JavaParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 86, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696;
			Match(LPAREN);
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (SHORT - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 697;
					receiverParameter();
					}
				}

				}
				break;
			case 2:
				{
				State = 700;
				receiverParameter();
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 701;
					Match(COMMA);
					State = 702;
					formalParameterList();
					}
				}

				}
				break;
			case 3:
				{
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FINAL - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (SHORT - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 705;
					formalParameterList();
					}
				}

				}
				break;
			}
			State = 710;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		public ReceiverParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterReceiverParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitReceiverParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverParameterContext receiverParameter() {
		ReceiverParameterContext _localctx = new ReceiverParameterContext(Context, State);
		EnterRule(_localctx, 88, RULE_receiverParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			typeType();
			State = 718;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 713;
				identifier();
				State = 714;
				Match(DOT);
				}
				}
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 721;
			Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 90, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723;
				formalParameter();
				State = 728;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 724;
						Match(COMMA);
						State = 725;
						formalParameter();
						}
						} 
					}
					State = 730;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
				}
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 731;
					Match(COMMA);
					State = 732;
					lastFormalParameter();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 735;
				lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 92, RULE_formalParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 738;
					variableModifier();
					}
					} 
				}
				State = 743;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			State = 744;
			typeType();
			State = 745;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(JavaParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 94, RULE_lastFormalParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 747;
					variableModifier();
					}
					} 
				}
				State = 752;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			State = 753;
			typeType();
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				{
				State = 754;
				annotation();
				}
				}
				State = 759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 760;
			Match(ELLIPSIS);
			State = 761;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaLVTIListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaLVTIParameterContext[] lambdaLVTIParameter() {
			return GetRuleContexts<LambdaLVTIParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaLVTIParameterContext lambdaLVTIParameter(int i) {
			return GetRuleContext<LambdaLVTIParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public LambdaLVTIListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaLVTIList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLambdaLVTIList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLambdaLVTIList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaLVTIList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaLVTIListContext lambdaLVTIList() {
		LambdaLVTIListContext _localctx = new LambdaLVTIListContext(Context, State);
		EnterRule(_localctx, 96, RULE_lambdaLVTIList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			lambdaLVTIParameter();
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 764;
				Match(COMMA);
				State = 765;
				lambdaLVTIParameter();
				}
				}
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaLVTIParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LambdaLVTIParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaLVTIParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLambdaLVTIParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLambdaLVTIParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaLVTIParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaLVTIParameterContext lambdaLVTIParameter() {
		LambdaLVTIParameterContext _localctx = new LambdaLVTIParameterContext(Context, State);
		EnterRule(_localctx, 98, RULE_lambdaLVTIParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 771;
					variableModifier();
					}
					} 
				}
				State = 776;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			}
			State = 777;
			Match(VAR);
			State = 778;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			identifier();
			State = 785;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 781;
					Match(DOT);
					State = 782;
					identifier();
					}
					} 
				}
				State = 787;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(JavaParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(JavaParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LITERAL() { return GetToken(JavaParser.BOOL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(JavaParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_BLOCK() { return GetToken(JavaParser.TEXT_BLOCK, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_literal);
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 788;
				integerLiteral();
				}
				break;
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 789;
				floatLiteral();
				}
				break;
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 790;
				Match(CHAR_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 791;
				Match(STRING_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 792;
				Match(BOOL_LITERAL);
				}
				break;
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 793;
				Match(NULL_LITERAL);
				}
				break;
			case TEXT_BLOCK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 794;
				Match(TEXT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(JavaParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(JavaParser.HEX_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LITERAL() { return GetToken(JavaParser.OCT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LITERAL() { return GetToken(JavaParser.BINARY_LITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 104, RULE_integerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(JavaParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_FLOAT_LITERAL() { return GetToken(JavaParser.HEX_FLOAT_LITERAL, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(Context, State);
		EnterRule(_localctx, 106, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT_LITERAL || _la==HEX_FLOAT_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltAnnotationQualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(JavaParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		public AltAnnotationQualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altAnnotationQualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAltAnnotationQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAltAnnotationQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltAnnotationQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltAnnotationQualifiedNameContext altAnnotationQualifiedName() {
		AltAnnotationQualifiedNameContext _localctx = new AltAnnotationQualifiedNameContext(Context, State);
		EnterRule(_localctx, 108, RULE_altAnnotationQualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 801;
				identifier();
				State = 802;
				Match(DOT);
				}
				}
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 809;
			Match(AT);
			State = 810;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(JavaParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltAnnotationQualifiedNameContext altAnnotationQualifiedName() {
			return GetRuleContext<AltAnnotationQualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairsContext elementValuePairs() {
			return GetRuleContext<ElementValuePairsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 110, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 812;
				Match(AT);
				State = 813;
				qualifiedName();
				}
				break;
			case 2:
				{
				State = 814;
				altAnnotationQualifiedName();
				}
				break;
			}
			State = 823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 817;
				Match(LPAREN);
				State = 820;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 818;
					elementValuePairs();
					}
					break;
				case 2:
					{
					State = 819;
					elementValue();
					}
					break;
				}
				State = 822;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ElementValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterElementValuePairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitElementValuePairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairsContext elementValuePairs() {
		ElementValuePairsContext _localctx = new ElementValuePairsContext(Context, State);
		EnterRule(_localctx, 112, RULE_elementValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			elementValuePair();
			State = 830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 826;
				Match(COMMA);
				State = 827;
				elementValuePair();
				}
				}
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(Context, State);
		EnterRule(_localctx, 114, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			identifier();
			State = 834;
			Match(ASSIGN);
			State = 835;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementValue);
		try {
			State = 840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 837;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 838;
				annotation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 839;
				elementValueArrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 118, RULE_elementValueArrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			Match(LBRACE);
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LBRACE - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				State = 843;
				elementValue();
				State = 848;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 844;
						Match(COMMA);
						State = 845;
						elementValue();
						}
						} 
					}
					State = 850;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
				}
				}
			}

			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 853;
				Match(COMMA);
				}
			}

			State = 856;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(JavaParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(JavaParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 120, RULE_annotationTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 858;
			Match(AT);
			State = 859;
			Match(INTERFACE);
			State = 860;
			identifier();
			State = 861;
			annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementDeclarationContext[] annotationTypeElementDeclaration() {
			return GetRuleContexts<AnnotationTypeElementDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration(int i) {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(Context, State);
		EnterRule(_localctx, 122, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863;
			Match(LBRACE);
			State = 867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (SEMI - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 864;
				annotationTypeElementDeclaration();
				}
				}
				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 870;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementRestContext annotationTypeElementRest() {
			return GetRuleContext<AnnotationTypeElementRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_annotationTypeElementDeclaration);
		try {
			int _alt;
			State = 880;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOLATILE:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 875;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 872;
						modifier();
						}
						} 
					}
					State = 877;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
				}
				State = 878;
				annotationTypeElementRest();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 879;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
			return GetRuleContext<AnnotationMethodOrConstantRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		public AnnotationTypeElementRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementRestContext annotationTypeElementRest() {
		AnnotationTypeElementRestContext _localctx = new AnnotationTypeElementRestContext(Context, State);
		EnterRule(_localctx, 126, RULE_annotationTypeElementRest);
		try {
			State = 906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 882;
				typeType();
				State = 883;
				annotationMethodOrConstantRest();
				State = 884;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 886;
				classDeclaration();
				State = 888;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 887;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 890;
				interfaceDeclaration();
				State = 892;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 891;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 894;
				enumDeclaration();
				State = 896;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
				case 1:
					{
					State = 895;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 898;
				annotationTypeDeclaration();
				State = 900;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
				case 1:
					{
					State = 899;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 902;
				recordDeclaration();
				State = 904;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 903;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodOrConstantRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationMethodRestContext annotationMethodRest() {
			return GetRuleContext<AnnotationMethodRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationConstantRestContext annotationConstantRest() {
			return GetRuleContext<AnnotationConstantRestContext>(0);
		}
		public AnnotationMethodOrConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodOrConstantRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodOrConstantRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodOrConstantRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodOrConstantRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
		AnnotationMethodOrConstantRestContext _localctx = new AnnotationMethodOrConstantRestContext(Context, State);
		EnterRule(_localctx, 128, RULE_annotationMethodOrConstantRest);
		try {
			State = 910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908;
				annotationMethodRest();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 909;
				annotationConstantRest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationMethodRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodRestContext annotationMethodRest() {
		AnnotationMethodRestContext _localctx = new AnnotationMethodRestContext(Context, State);
		EnterRule(_localctx, 130, RULE_annotationMethodRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			identifier();
			State = 913;
			Match(LPAREN);
			State = 914;
			Match(RPAREN);
			State = 916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 915;
				defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationConstantRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public AnnotationConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationConstantRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationConstantRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationConstantRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationConstantRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationConstantRestContext annotationConstantRest() {
		AnnotationConstantRestContext _localctx = new AnnotationConstantRestContext(Context, State);
		EnterRule(_localctx, 132, RULE_annotationConstantRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 134, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(DEFAULT);
			State = 921;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(JavaParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(JavaParser.OPEN, 0); }
		public ModuleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterModuleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitModuleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDeclarationContext moduleDeclaration() {
		ModuleDeclarationContext _localctx = new ModuleDeclarationContext(Context, State);
		EnterRule(_localctx, 136, RULE_moduleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 923;
				Match(OPEN);
				}
			}

			State = 926;
			Match(MODULE);
			State = 927;
			qualifiedName();
			State = 928;
			moduleBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDirectiveContext[] moduleDirective() {
			return GetRuleContexts<ModuleDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleDirectiveContext moduleDirective(int i) {
			return GetRuleContext<ModuleDirectiveContext>(i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(Context, State);
		EnterRule(_localctx, 138, RULE_moduleBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(LBRACE);
			State = 934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REQUIRES) | (1L << EXPORTS) | (1L << OPENS) | (1L << USES) | (1L << PROVIDES))) != 0)) {
				{
				{
				State = 931;
				moduleDirective();
				}
				}
				State = 936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 937;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(JavaParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequiresModifierContext[] requiresModifier() {
			return GetRuleContexts<RequiresModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequiresModifierContext requiresModifier(int i) {
			return GetRuleContext<RequiresModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORTS() { return GetToken(JavaParser.EXPORTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(JavaParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENS() { return GetToken(JavaParser.OPENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USES() { return GetToken(JavaParser.USES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDES() { return GetToken(JavaParser.PROVIDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(JavaParser.WITH, 0); }
		public ModuleDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterModuleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitModuleDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleDirectiveContext moduleDirective() {
		ModuleDirectiveContext _localctx = new ModuleDirectiveContext(Context, State);
		EnterRule(_localctx, 140, RULE_moduleDirective);
		int _la;
		try {
			int _alt;
			State = 975;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 939;
				Match(REQUIRES);
				State = 943;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 940;
						requiresModifier();
						}
						} 
					}
					State = 945;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,107,Context);
				}
				State = 946;
				qualifiedName();
				State = 947;
				Match(SEMI);
				}
				break;
			case EXPORTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 949;
				Match(EXPORTS);
				State = 950;
				qualifiedName();
				State = 953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 951;
					Match(TO);
					State = 952;
					qualifiedName();
					}
				}

				State = 955;
				Match(SEMI);
				}
				break;
			case OPENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 957;
				Match(OPENS);
				State = 958;
				qualifiedName();
				State = 961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO) {
					{
					State = 959;
					Match(TO);
					State = 960;
					qualifiedName();
					}
				}

				State = 963;
				Match(SEMI);
				}
				break;
			case USES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 965;
				Match(USES);
				State = 966;
				qualifiedName();
				State = 967;
				Match(SEMI);
				}
				break;
			case PROVIDES:
				EnterOuterAlt(_localctx, 5);
				{
				State = 969;
				Match(PROVIDES);
				State = 970;
				qualifiedName();
				State = 971;
				Match(WITH);
				State = 972;
				qualifiedName();
				State = 973;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiresModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSITIVE() { return GetToken(JavaParser.TRANSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public RequiresModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiresModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterRequiresModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitRequiresModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiresModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiresModifierContext requiresModifier() {
		RequiresModifierContext _localctx = new RequiresModifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_requiresModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			_la = TokenStream.LA(1);
			if ( !(_la==STATIC || _la==TRANSITIVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECORD() { return GetToken(JavaParser.RECORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordHeaderContext recordHeader() {
			return GetRuleContext<RecordHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordBodyContext recordBody() {
			return GetRuleContext<RecordBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(JavaParser.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public RecordDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterRecordDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitRecordDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordDeclarationContext recordDeclaration() {
		RecordDeclarationContext _localctx = new RecordDeclarationContext(Context, State);
		EnterRule(_localctx, 144, RULE_recordDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			Match(RECORD);
			State = 980;
			identifier();
			State = 982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 981;
				typeParameters();
				}
			}

			State = 984;
			recordHeader();
			State = 987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 985;
				Match(IMPLEMENTS);
				State = 986;
				typeList();
				}
			}

			State = 989;
			recordBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordHeaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentListContext recordComponentList() {
			return GetRuleContext<RecordComponentListContext>(0);
		}
		public RecordHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterRecordHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitRecordHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordHeaderContext recordHeader() {
		RecordHeaderContext _localctx = new RecordHeaderContext(Context, State);
		EnterRule(_localctx, 146, RULE_recordHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991;
			Match(LPAREN);
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (SHORT - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				State = 992;
				recordComponentList();
				}
			}

			State = 995;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordComponentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentContext[] recordComponent() {
			return GetRuleContexts<RecordComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordComponentContext recordComponent(int i) {
			return GetRuleContext<RecordComponentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public RecordComponentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordComponentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterRecordComponentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitRecordComponentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordComponentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordComponentListContext recordComponentList() {
		RecordComponentListContext _localctx = new RecordComponentListContext(Context, State);
		EnterRule(_localctx, 148, RULE_recordComponentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			recordComponent();
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 998;
				Match(COMMA);
				State = 999;
				recordComponent();
				}
				}
				State = 1004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordComponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RecordComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterRecordComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitRecordComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordComponentContext recordComponent() {
		RecordComponentContext _localctx = new RecordComponentContext(Context, State);
		EnterRule(_localctx, 150, RULE_recordComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005;
			typeType();
			State = 1006;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public RecordBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterRecordBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitRecordBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordBodyContext recordBody() {
		RecordBodyContext _localctx = new RecordBodyContext(Context, State);
		EnterRule(_localctx, 152, RULE_recordBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			Match(LBRACE);
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (DOUBLE - 1)) | (1L << (ENUM - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NATIVE - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (TRANSIENT - 1)) | (1L << (VOID - 1)) | (1L << (VOLATILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 1009;
				classBodyDeclaration();
				}
				}
				State = 1014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1015;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 154, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017;
			Match(LBRACE);
			State = 1021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (ASSERT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BREAK - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (CONTINUE - 1)) | (1L << (DO - 1)) | (1L << (DOUBLE - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (FOR - 1)) | (1L << (IF - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NEW - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (RETURN - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SUPER - 1)) | (1L << (SWITCH - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (THIS - 1)) | (1L << (THROW - 1)) | (1L << (TRY - 1)) | (1L << (VOID - 1)) | (1L << (WHILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (DECIMAL_LITERAL - 65)) | (1L << (HEX_LITERAL - 65)) | (1L << (OCT_LITERAL - 65)) | (1L << (BINARY_LITERAL - 65)) | (1L << (FLOAT_LITERAL - 65)) | (1L << (HEX_FLOAT_LITERAL - 65)) | (1L << (BOOL_LITERAL - 65)) | (1L << (CHAR_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (TEXT_BLOCK - 65)) | (1L << (NULL_LITERAL - 65)) | (1L << (LPAREN - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)) | (1L << (INC - 65)) | (1L << (DEC - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				{
				State = 1018;
				blockStatement();
				}
				}
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1024;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalTypeDeclarationContext localTypeDeclaration() {
			return GetRuleContext<LocalTypeDeclarationContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_blockStatement);
		try {
			State = 1031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1026;
				localVariableDeclaration();
				State = 1027;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029;
				statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1030;
				localTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 158, RULE_localVariableDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1033;
					variableModifier();
					}
					} 
				}
				State = 1038;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			State = 1047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 1039;
				typeType();
				State = 1040;
				variableDeclarators();
				}
				break;
			case 2:
				{
				State = 1042;
				Match(VAR);
				State = 1043;
				identifier();
				State = 1044;
				Match(ASSIGN);
				State = 1045;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(JavaParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(JavaParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(JavaParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORTS() { return GetToken(JavaParser.EXPORTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENS() { return GetToken(JavaParser.OPENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(JavaParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USES() { return GetToken(JavaParser.USES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROVIDES() { return GetToken(JavaParser.PROVIDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(JavaParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSITIVE() { return GetToken(JavaParser.TRANSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(JavaParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEALED() { return GetToken(JavaParser.SEALED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERMITS() { return GetToken(JavaParser.PERMITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECORD() { return GetToken(JavaParser.RECORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 160, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordDeclarationContext recordDeclaration() {
			return GetRuleContext<RecordDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public LocalTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLocalTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLocalTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalTypeDeclarationContext localTypeDeclaration() {
		LocalTypeDeclarationContext _localctx = new LocalTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 162, RULE_localTypeDeclaration);
		try {
			int _alt;
			State = 1063;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case CLASS:
			case FINAL:
			case INTERFACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case NON_SEALED:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1054;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1051;
						classOrInterfaceModifier();
						}
						} 
					}
					State = 1056;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
				}
				State = 1060;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 1057;
					classDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 1058;
					interfaceDeclaration();
					}
					break;
				case RECORD:
					{
					State = 1059;
					recordDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1062;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext blockLabel;
		public ExpressionContext statementExpression;
		public IdentifierContext identifierLabel;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(JavaParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(JavaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(JavaParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(JavaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(JavaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(JavaParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(JavaParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(JavaParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED() { return GetToken(JavaParser.SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(JavaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(JavaParser.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(JavaParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(JavaParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(JavaParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchExpressionContext switchExpression() {
			return GetRuleContext<SwitchExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 1178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1065;
				_localctx.blockLabel = block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1066;
				Match(ASSERT);
				State = 1067;
				expression(0);
				State = 1070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 1068;
					Match(COLON);
					State = 1069;
					expression(0);
					}
				}

				State = 1072;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1074;
				Match(IF);
				State = 1075;
				parExpression();
				State = 1076;
				statement();
				State = 1079;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
				case 1:
					{
					State = 1077;
					Match(ELSE);
					State = 1078;
					statement();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1081;
				Match(FOR);
				State = 1082;
				Match(LPAREN);
				State = 1083;
				forControl();
				State = 1084;
				Match(RPAREN);
				State = 1085;
				statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1087;
				Match(WHILE);
				State = 1088;
				parExpression();
				State = 1089;
				statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1091;
				Match(DO);
				State = 1092;
				statement();
				State = 1093;
				Match(WHILE);
				State = 1094;
				parExpression();
				State = 1095;
				Match(SEMI);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1097;
				Match(TRY);
				State = 1098;
				block();
				State = 1108;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 1100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 1099;
						catchClause();
						}
						}
						State = 1102;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==CATCH );
					State = 1105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 1104;
						finallyBlock();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 1107;
					finallyBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1110;
				Match(TRY);
				State = 1111;
				resourceSpecification();
				State = 1112;
				block();
				State = 1116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CATCH) {
					{
					{
					State = 1113;
					catchClause();
					}
					}
					State = 1118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FINALLY) {
					{
					State = 1119;
					finallyBlock();
					}
				}

				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1122;
				Match(SWITCH);
				State = 1123;
				parExpression();
				State = 1124;
				Match(LBRACE);
				State = 1128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1125;
						switchBlockStatementGroup();
						}
						} 
					}
					State = 1130;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,130,Context);
				}
				State = 1134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1131;
					switchLabel();
					}
					}
					State = 1136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1137;
				Match(RBRACE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1139;
				Match(SYNCHRONIZED);
				State = 1140;
				parExpression();
				State = 1141;
				block();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1143;
				Match(RETURN);
				State = 1145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1144;
					expression(0);
					}
				}

				State = 1147;
				Match(SEMI);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1148;
				Match(THROW);
				State = 1149;
				expression(0);
				State = 1150;
				Match(SEMI);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1152;
				Match(BREAK);
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) {
					{
					State = 1153;
					identifier();
					}
				}

				State = 1156;
				Match(SEMI);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1157;
				Match(CONTINUE);
				State = 1159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==IDENTIFIER) {
					{
					State = 1158;
					identifier();
					}
				}

				State = 1161;
				Match(SEMI);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1162;
				Match(YIELD);
				State = 1163;
				expression(0);
				State = 1164;
				Match(SEMI);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1166;
				Match(SEMI);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1167;
				_localctx.statementExpression = expression(0);
				State = 1168;
				Match(SEMI);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1170;
				switchExpression();
				State = 1172;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
				case 1:
					{
					State = 1171;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1174;
				_localctx.identifierLabel = identifier();
				State = 1175;
				Match(COLON);
				State = 1176;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(JavaParser.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 166, RULE_catchClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			Match(CATCH);
			State = 1181;
			Match(LPAREN);
			State = 1185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1182;
					variableModifier();
					}
					} 
				}
				State = 1187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,137,Context);
			}
			State = 1188;
			catchType();
			State = 1189;
			identifier();
			State = 1190;
			Match(RPAREN);
			State = 1191;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITOR() { return GetTokens(JavaParser.BITOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR(int i) {
			return GetToken(JavaParser.BITOR, i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			qualifiedName();
			State = 1198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITOR) {
				{
				{
				State = 1194;
				Match(BITOR);
				State = 1195;
				qualifiedName();
				}
				}
				State = 1200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(JavaParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFinallyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFinallyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyBlockContext finallyBlock() {
		FinallyBlockContext _localctx = new FinallyBlockContext(Context, State);
		EnterRule(_localctx, 170, RULE_finallyBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1201;
			Match(FINALLY);
			State = 1202;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourcesContext resources() {
			return GetRuleContext<ResourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(Context, State);
		EnterRule(_localctx, 172, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1204;
			Match(LPAREN);
			State = 1205;
			resources();
			State = 1207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1206;
				Match(SEMI);
				}
			}

			State = 1209;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(JavaParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(JavaParser.SEMI, i);
		}
		public ResourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterResources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitResources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourcesContext resources() {
		ResourcesContext _localctx = new ResourcesContext(Context, State);
		EnterRule(_localctx, 174, RULE_resources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1211;
			resource();
			State = 1216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1212;
					Match(SEMI);
					State = 1213;
					resource();
					}
					} 
				}
				State = 1218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 176, RULE_resource);
		try {
			int _alt;
			State = 1236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1219;
						variableModifier();
						}
						} 
					}
					State = 1224;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				}
				State = 1230;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
				case 1:
					{
					State = 1225;
					classOrInterfaceType();
					State = 1226;
					variableDeclaratorId();
					}
					break;
				case 2:
					{
					State = 1228;
					Match(VAR);
					State = 1229;
					identifier();
					}
					break;
				}
				State = 1232;
				Match(ASSIGN);
				State = 1233;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1235;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 178, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1238;
				switchLabel();
				}
				}
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 1244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1243;
				blockStatement();
				}
				}
				State = 1246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (ASSERT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BREAK - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (CONTINUE - 1)) | (1L << (DO - 1)) | (1L << (DOUBLE - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (FOR - 1)) | (1L << (IF - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NEW - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (RETURN - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SUPER - 1)) | (1L << (SWITCH - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (THIS - 1)) | (1L << (THROW - 1)) | (1L << (TRY - 1)) | (1L << (VOID - 1)) | (1L << (WHILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (DECIMAL_LITERAL - 65)) | (1L << (HEX_LITERAL - 65)) | (1L << (OCT_LITERAL - 65)) | (1L << (BINARY_LITERAL - 65)) | (1L << (FLOAT_LITERAL - 65)) | (1L << (HEX_FLOAT_LITERAL - 65)) | (1L << (BOOL_LITERAL - 65)) | (1L << (CHAR_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (TEXT_BLOCK - 65)) | (1L << (NULL_LITERAL - 65)) | (1L << (LPAREN - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)) | (1L << (INC - 65)) | (1L << (DEC - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ExpressionContext constantExpression;
		public IToken enumConstantName;
		public IdentifierContext varName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(JavaParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 180, RULE_switchLabel);
		try {
			State = 1259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1248;
				Match(CASE);
				State = 1254;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
				case 1:
					{
					State = 1249;
					_localctx.constantExpression = expression(0);
					}
					break;
				case 2:
					{
					State = 1250;
					_localctx.enumConstantName = Match(IDENTIFIER);
					}
					break;
				case 3:
					{
					State = 1251;
					typeType();
					State = 1252;
					_localctx.varName = identifier();
					}
					break;
				}
				State = 1256;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1257;
				Match(DEFAULT);
				State = 1258;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ExpressionListContext forUpdate;
		[System.Diagnostics.DebuggerNonUserCode] public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(JavaParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(JavaParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 182, RULE_forControl);
		int _la;
		try {
			State = 1273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1261;
				enhancedForControl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FINAL - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1262;
					forInit();
					}
				}

				State = 1265;
				Match(SEMI);
				State = 1267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1266;
					expression(0);
					}
				}

				State = 1269;
				Match(SEMI);
				State = 1271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1270;
					_localctx.forUpdate = expressionList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 184, RULE_forInit);
		try {
			State = 1277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1275;
				localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1276;
				expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(JavaParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnhancedForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnhancedForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(Context, State);
		EnterRule(_localctx, 186, RULE_enhancedForControl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1279;
					variableModifier();
					}
					} 
				}
				State = 1284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,153,Context);
			}
			State = 1287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 1285;
				typeType();
				}
				break;
			case 2:
				{
				State = 1286;
				Match(VAR);
				}
				break;
			}
			State = 1289;
			variableDeclaratorId();
			State = 1290;
			Match(COLON);
			State = 1291;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 188, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			Match(LPAREN);
			State = 1294;
			expression(0);
			State = 1295;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 190, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1297;
			expression(0);
			State = 1302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1298;
				Match(COMMA);
				State = 1299;
				expression(0);
				}
				}
				State = 1304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 192, RULE_methodCall);
		int _la;
		try {
			State = 1324;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1305;
				identifier();
				State = 1306;
				Match(LPAREN);
				State = 1308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1307;
					expressionList();
					}
				}

				State = 1310;
				Match(RPAREN);
				}
				break;
			case THIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1312;
				Match(THIS);
				State = 1313;
				Match(LPAREN);
				State = 1315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1314;
					expressionList();
					}
				}

				State = 1317;
				Match(RPAREN);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1318;
				Match(SUPER);
				State = 1319;
				Match(LPAREN);
				State = 1321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
					{
					State = 1320;
					expressionList();
					}
				}

				State = 1323;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken bop;
		public IToken postfix;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(JavaParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITAND() { return GetTokens(JavaParser.BITAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND(int i) {
			return GetToken(JavaParser.BITAND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(JavaParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(JavaParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(JavaParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(JavaParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(JavaParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(JavaParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchExpressionContext switchExpression() {
			return GetRuleContext<SwitchExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(JavaParser.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(JavaParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(JavaParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(JavaParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(JavaParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(JavaParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(JavaParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(JavaParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(JavaParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(JavaParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(JavaParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(JavaParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(JavaParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR() { return GetToken(JavaParser.BITOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(JavaParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(JavaParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(JavaParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(JavaParser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(JavaParser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(JavaParser.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(JavaParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(JavaParser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(JavaParser.OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(JavaParser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT_ASSIGN() { return GetToken(JavaParser.RSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URSHIFT_ASSIGN() { return GetToken(JavaParser.URSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT_ASSIGN() { return GetToken(JavaParser.LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(JavaParser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerCreatorContext innerCreator() {
			return GetRuleContext<InnerCreatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationContext explicitGenericInvocation() {
			return GetRuleContext<ExplicitGenericInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(JavaParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(JavaParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCEOF() { return GetToken(JavaParser.INSTANCEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 194;
		EnterRecursionRule(_localctx, 194, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1327;
				primary();
				}
				break;
			case 2:
				{
				State = 1328;
				methodCall();
				}
				break;
			case 3:
				{
				State = 1329;
				Match(NEW);
				State = 1330;
				creator();
				}
				break;
			case 4:
				{
				State = 1331;
				Match(LPAREN);
				State = 1335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1332;
						annotation();
						}
						} 
					}
					State = 1337;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,160,Context);
				}
				State = 1338;
				typeType();
				State = 1343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 1339;
					Match(BITAND);
					State = 1340;
					typeType();
					}
					}
					State = 1345;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1346;
				Match(RPAREN);
				State = 1347;
				expression(22);
				}
				break;
			case 5:
				{
				State = 1349;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INC - 100)) | (1L << (DEC - 100)) | (1L << (ADD - 100)) | (1L << (SUB - 100)))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1350;
				expression(20);
				}
				break;
			case 6:
				{
				State = 1351;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==TILDE) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1352;
				expression(19);
				}
				break;
			case 7:
				{
				State = 1353;
				lambdaExpression();
				}
				break;
			case 8:
				{
				State = 1354;
				switchExpression();
				}
				break;
			case 9:
				{
				State = 1355;
				typeType();
				State = 1356;
				Match(COLONCOLON);
				State = 1362;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MODULE:
				case OPEN:
				case REQUIRES:
				case EXPORTS:
				case OPENS:
				case TO:
				case USES:
				case PROVIDES:
				case WITH:
				case TRANSITIVE:
				case VAR:
				case YIELD:
				case RECORD:
				case SEALED:
				case PERMITS:
				case LT:
				case IDENTIFIER:
					{
					State = 1358;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1357;
						typeArguments();
						}
					}

					State = 1360;
					identifier();
					}
					break;
				case NEW:
					{
					State = 1361;
					Match(NEW);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				{
				State = 1364;
				classType();
				State = 1365;
				Match(COLONCOLON);
				State = 1367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1366;
					typeArguments();
					}
				}

				State = 1369;
				Match(NEW);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1456;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1454;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1373;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1374;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (MUL - 104)) | (1L << (DIV - 104)) | (1L << (MOD - 104)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1375;
						expression(19);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1376;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1377;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1378;
						expression(18);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1379;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1387;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
						case 1:
							{
							State = 1380;
							Match(LT);
							State = 1381;
							Match(LT);
							}
							break;
						case 2:
							{
							State = 1382;
							Match(GT);
							State = 1383;
							Match(GT);
							State = 1384;
							Match(GT);
							}
							break;
						case 3:
							{
							State = 1385;
							Match(GT);
							State = 1386;
							Match(GT);
							}
							break;
						}
						State = 1389;
						expression(17);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1390;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1391;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (GT - 88)) | (1L << (LT - 88)) | (1L << (LE - 88)) | (1L << (GE - 88)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1392;
						expression(16);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1393;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1394;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1395;
						expression(14);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1396;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1397;
						_localctx.bop = Match(BITAND);
						State = 1398;
						expression(13);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1399;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1400;
						_localctx.bop = Match(CARET);
						State = 1401;
						expression(12);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1402;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1403;
						_localctx.bop = Match(BITOR);
						State = 1404;
						expression(11);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1405;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1406;
						_localctx.bop = Match(AND);
						State = 1407;
						expression(10);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1408;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1409;
						_localctx.bop = Match(OR);
						State = 1410;
						expression(9);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1411;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1412;
						_localctx.bop = Match(QUESTION);
						State = 1413;
						expression(0);
						State = 1414;
						Match(COLON);
						State = 1415;
						expression(7);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1417;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1418;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (ASSIGN - 87)) | (1L << (ADD_ASSIGN - 87)) | (1L << (SUB_ASSIGN - 87)) | (1L << (MUL_ASSIGN - 87)) | (1L << (DIV_ASSIGN - 87)) | (1L << (AND_ASSIGN - 87)) | (1L << (OR_ASSIGN - 87)) | (1L << (XOR_ASSIGN - 87)) | (1L << (MOD_ASSIGN - 87)) | (1L << (LSHIFT_ASSIGN - 87)) | (1L << (RSHIFT_ASSIGN - 87)) | (1L << (URSHIFT_ASSIGN - 87)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1419;
						expression(6);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1420;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1421;
						_localctx.bop = Match(DOT);
						State = 1433;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
						case 1:
							{
							State = 1422;
							identifier();
							}
							break;
						case 2:
							{
							State = 1423;
							methodCall();
							}
							break;
						case 3:
							{
							State = 1424;
							Match(THIS);
							}
							break;
						case 4:
							{
							State = 1425;
							Match(NEW);
							State = 1427;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==LT) {
								{
								State = 1426;
								nonWildcardTypeArguments();
								}
							}

							State = 1429;
							innerCreator();
							}
							break;
						case 5:
							{
							State = 1430;
							Match(SUPER);
							State = 1431;
							superSuffix();
							}
							break;
						case 6:
							{
							State = 1432;
							explicitGenericInvocation();
							}
							break;
						}
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1435;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1436;
						Match(LBRACK);
						State = 1437;
						expression(0);
						State = 1438;
						Match(RBRACK);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1440;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1441;
						_localctx.postfix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==INC || _la==DEC) ) {
							_localctx.postfix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1442;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1443;
						_localctx.bop = Match(INSTANCEOF);
						State = 1446;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
						case 1:
							{
							State = 1444;
							typeType();
							}
							break;
						case 2:
							{
							State = 1445;
							pattern();
							}
							break;
						}
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1448;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1449;
						Match(COLONCOLON);
						State = 1451;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LT) {
							{
							State = 1450;
							typeArguments();
							}
						}

						State = 1453;
						identifier();
						}
						break;
					}
					} 
				}
				State = 1458;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 196, RULE_pattern);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1459;
					variableModifier();
					}
					} 
				}
				State = 1464;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			}
			State = 1465;
			typeType();
			State = 1469;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1466;
					annotation();
					}
					} 
				}
				State = 1471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			}
			State = 1472;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(JavaParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 198, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1474;
			lambdaParameters();
			State = 1475;
			Match(ARROW);
			State = 1476;
			lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaLVTIListContext lambdaLVTIList() {
			return GetRuleContext<LambdaLVTIListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 200, RULE_lambdaParameters);
		int _la;
		try {
			State = 1500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1478;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1479;
				Match(LPAREN);
				State = 1481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FINAL - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (SHORT - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 1480;
					formalParameterList();
					}
				}

				State = 1483;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1484;
				Match(LPAREN);
				State = 1485;
				identifier();
				State = 1490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1486;
					Match(COMMA);
					State = 1487;
					identifier();
					}
					}
					State = 1492;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1493;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1495;
				Match(LPAREN);
				State = 1497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (FINAL - 18)) | (1L << (MODULE - 18)) | (1L << (OPEN - 18)) | (1L << (REQUIRES - 18)) | (1L << (EXPORTS - 18)) | (1L << (OPENS - 18)) | (1L << (TO - 18)) | (1L << (USES - 18)) | (1L << (PROVIDES - 18)) | (1L << (WITH - 18)) | (1L << (TRANSITIVE - 18)) | (1L << (VAR - 18)) | (1L << (YIELD - 18)) | (1L << (RECORD - 18)) | (1L << (SEALED - 18)) | (1L << (PERMITS - 18)))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 1496;
					lambdaLVTIList();
					}
				}

				State = 1499;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 202, RULE_lambdaBody);
		try {
			State = 1504;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case TEXT_BLOCK:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1502;
				expression(0);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1503;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(JavaParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 204, RULE_primary);
		try {
			State = 1524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1506;
				Match(LPAREN);
				State = 1507;
				expression(0);
				State = 1508;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1510;
				Match(THIS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1511;
				Match(SUPER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1512;
				literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1513;
				identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1514;
				typeTypeOrVoid();
				State = 1515;
				Match(DOT);
				State = 1516;
				Match(CLASS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1518;
				nonWildcardTypeArguments();
				State = 1522;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUPER:
				case MODULE:
				case OPEN:
				case REQUIRES:
				case EXPORTS:
				case OPENS:
				case TO:
				case USES:
				case PROVIDES:
				case WITH:
				case TRANSITIVE:
				case VAR:
				case YIELD:
				case RECORD:
				case SEALED:
				case PERMITS:
				case IDENTIFIER:
					{
					State = 1519;
					explicitGenericInvocationSuffix();
					}
					break;
				case THIS:
					{
					State = 1520;
					Match(THIS);
					State = 1521;
					arguments();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(JavaParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabeledRuleContext[] switchLabeledRule() {
			return GetRuleContexts<SwitchLabeledRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabeledRuleContext switchLabeledRule(int i) {
			return GetRuleContext<SwitchLabeledRuleContext>(i);
		}
		public SwitchExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterSwitchExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitSwitchExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchExpressionContext switchExpression() {
		SwitchExpressionContext _localctx = new SwitchExpressionContext(Context, State);
		EnterRule(_localctx, 206, RULE_switchExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1526;
			Match(SWITCH);
			State = 1527;
			parExpression();
			State = 1528;
			Match(LBRACE);
			State = 1532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1529;
				switchLabeledRule();
				}
				}
				State = 1534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1535;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabeledRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(JavaParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchRuleOutcomeContext switchRuleOutcome() {
			return GetRuleContext<SwitchRuleOutcomeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(JavaParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(JavaParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GuardedPatternContext guardedPattern() {
			return GetRuleContext<GuardedPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		public SwitchLabeledRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabeledRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabeledRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabeledRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabeledRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabeledRuleContext switchLabeledRule() {
		SwitchLabeledRuleContext _localctx = new SwitchLabeledRuleContext(Context, State);
		EnterRule(_localctx, 208, RULE_switchLabeledRule);
		int _la;
		try {
			State = 1548;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1537;
				Match(CASE);
				State = 1541;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1538;
					expressionList();
					}
					break;
				case 2:
					{
					State = 1539;
					Match(NULL_LITERAL);
					}
					break;
				case 3:
					{
					State = 1540;
					guardedPattern(0);
					}
					break;
				}
				State = 1543;
				_la = TokenStream.LA(1);
				if ( !(_la==COLON || _la==ARROW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1544;
				switchRuleOutcome();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1545;
				Match(DEFAULT);
				State = 1546;
				_la = TokenStream.LA(1);
				if ( !(_la==COLON || _la==ARROW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1547;
				switchRuleOutcome();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardedPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GuardedPatternContext guardedPattern() {
			return GetRuleContext<GuardedPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(JavaParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(JavaParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GuardedPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guardedPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterGuardedPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitGuardedPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuardedPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardedPatternContext guardedPattern() {
		return guardedPattern(0);
	}

	private GuardedPatternContext guardedPattern(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		GuardedPatternContext _localctx = new GuardedPatternContext(Context, _parentState);
		GuardedPatternContext _prevctx = _localctx;
		int _startState = 210;
		EnterRecursionRule(_localctx, 210, RULE_guardedPattern, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 1551;
				Match(LPAREN);
				State = 1552;
				guardedPattern(0);
				State = 1553;
				Match(RPAREN);
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FINAL:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case AT:
			case IDENTIFIER:
				{
				State = 1558;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1555;
						variableModifier();
						}
						} 
					}
					State = 1560;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,185,Context);
				}
				State = 1561;
				typeType();
				State = 1565;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1562;
						annotation();
						}
						} 
					}
					State = 1567;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,186,Context);
				}
				State = 1568;
				identifier();
				State = 1573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1569;
						Match(AND);
						State = 1570;
						expression(0);
						}
						} 
					}
					State = 1575;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,187,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1583;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new GuardedPatternContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_guardedPattern);
					State = 1578;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1579;
					Match(AND);
					State = 1580;
					expression(0);
					}
					} 
				}
				State = 1585;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SwitchRuleOutcomeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchRuleOutcomeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchRuleOutcome; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterSwitchRuleOutcome(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitSwitchRuleOutcome(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchRuleOutcome(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchRuleOutcomeContext switchRuleOutcome() {
		SwitchRuleOutcomeContext _localctx = new SwitchRuleOutcomeContext(Context, State);
		EnterRule(_localctx, 212, RULE_switchRuleOutcome);
		int _la;
		try {
			State = 1593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1586;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (ABSTRACT - 1)) | (1L << (ASSERT - 1)) | (1L << (BOOLEAN - 1)) | (1L << (BREAK - 1)) | (1L << (BYTE - 1)) | (1L << (CHAR - 1)) | (1L << (CLASS - 1)) | (1L << (CONTINUE - 1)) | (1L << (DO - 1)) | (1L << (DOUBLE - 1)) | (1L << (FINAL - 1)) | (1L << (FLOAT - 1)) | (1L << (FOR - 1)) | (1L << (IF - 1)) | (1L << (INT - 1)) | (1L << (INTERFACE - 1)) | (1L << (LONG - 1)) | (1L << (NEW - 1)) | (1L << (PRIVATE - 1)) | (1L << (PROTECTED - 1)) | (1L << (PUBLIC - 1)) | (1L << (RETURN - 1)) | (1L << (SHORT - 1)) | (1L << (STATIC - 1)) | (1L << (STRICTFP - 1)) | (1L << (SUPER - 1)) | (1L << (SWITCH - 1)) | (1L << (SYNCHRONIZED - 1)) | (1L << (THIS - 1)) | (1L << (THROW - 1)) | (1L << (TRY - 1)) | (1L << (VOID - 1)) | (1L << (WHILE - 1)) | (1L << (MODULE - 1)) | (1L << (OPEN - 1)) | (1L << (REQUIRES - 1)) | (1L << (EXPORTS - 1)) | (1L << (OPENS - 1)) | (1L << (TO - 1)) | (1L << (USES - 1)) | (1L << (PROVIDES - 1)) | (1L << (WITH - 1)) | (1L << (TRANSITIVE - 1)) | (1L << (VAR - 1)) | (1L << (YIELD - 1)) | (1L << (RECORD - 1)) | (1L << (SEALED - 1)))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PERMITS - 65)) | (1L << (NON_SEALED - 65)) | (1L << (DECIMAL_LITERAL - 65)) | (1L << (HEX_LITERAL - 65)) | (1L << (OCT_LITERAL - 65)) | (1L << (BINARY_LITERAL - 65)) | (1L << (FLOAT_LITERAL - 65)) | (1L << (HEX_FLOAT_LITERAL - 65)) | (1L << (BOOL_LITERAL - 65)) | (1L << (CHAR_LITERAL - 65)) | (1L << (STRING_LITERAL - 65)) | (1L << (TEXT_BLOCK - 65)) | (1L << (NULL_LITERAL - 65)) | (1L << (LPAREN - 65)) | (1L << (LBRACE - 65)) | (1L << (SEMI - 65)) | (1L << (LT - 65)) | (1L << (BANG - 65)) | (1L << (TILDE - 65)) | (1L << (INC - 65)) | (1L << (DEC - 65)) | (1L << (ADD - 65)) | (1L << (SUB - 65)) | (1L << (AT - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
					{
					{
					State = 1587;
					blockStatement();
					}
					}
					State = 1592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 214, RULE_classType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				{
				State = 1595;
				classOrInterfaceType();
				State = 1596;
				Match(DOT);
				}
				break;
			}
			State = 1603;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1600;
					annotation();
					}
					} 
				}
				State = 1605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			}
			State = 1606;
			identifier();
			State = 1608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1607;
				typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 216, RULE_creator);
		try {
			State = 1619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1610;
				nonWildcardTypeArguments();
				State = 1611;
				createdName();
				State = 1612;
				classCreatorRest();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1614;
				createdName();
				State = 1617;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACK:
					{
					State = 1615;
					arrayCreatorRest();
					}
					break;
				case LPAREN:
					{
					State = 1616;
					classCreatorRest();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext[] typeArgumentsOrDiamond() {
			return GetRuleContexts<TypeArgumentsOrDiamondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i) {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreatedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 218, RULE_createdName);
		int _la;
		try {
			State = 1636;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1621;
				identifier();
				State = 1623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1622;
					typeArgumentsOrDiamond();
					}
				}

				State = 1632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 1625;
					Match(DOT);
					State = 1626;
					identifier();
					State = 1628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1627;
						typeArgumentsOrDiamond();
						}
					}

					}
					}
					State = 1634;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1635;
				primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerCreatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
			return GetRuleContext<NonWildcardTypeArgumentsOrDiamondContext>(0);
		}
		public InnerCreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerCreator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInnerCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInnerCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerCreatorContext innerCreator() {
		InnerCreatorContext _localctx = new InnerCreatorContext(Context, State);
		EnterRule(_localctx, 220, RULE_innerCreator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1638;
			identifier();
			State = 1640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1639;
				nonWildcardTypeArgumentsOrDiamond();
				}
			}

			State = 1642;
			classCreatorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
		EnterRule(_localctx, 222, RULE_arrayCreatorRest);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644;
			Match(LBRACK);
			State = 1672;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RBRACK:
				{
				State = 1645;
				Match(RBRACK);
				State = 1650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1646;
					Match(LBRACK);
					State = 1647;
					Match(RBRACK);
					}
					}
					State = 1652;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1653;
				arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case SWITCH:
			case THIS:
			case VOID:
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case TEXT_BLOCK:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				{
				State = 1654;
				expression(0);
				State = 1655;
				Match(RBRACK);
				State = 1662;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1656;
						Match(LBRACK);
						State = 1657;
						expression(0);
						State = 1658;
						Match(RBRACK);
						}
						} 
					}
					State = 1664;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,203,Context);
				}
				State = 1669;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1665;
						Match(LBRACK);
						State = 1666;
						Match(RBRACK);
						}
						} 
					}
					State = 1671;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 224, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674;
			arguments();
			State = 1676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				{
				State = 1675;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationContext explicitGenericInvocation() {
		ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(Context, State);
		EnterRule(_localctx, 226, RULE_explicitGenericInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678;
			nonWildcardTypeArguments();
			State = 1679;
			explicitGenericInvocationSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 228, RULE_typeArgumentsOrDiamond);
		try {
			State = 1684;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1681;
				Match(LT);
				State = 1682;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1683;
				typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
		NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 230, RULE_nonWildcardTypeArgumentsOrDiamond);
		try {
			State = 1689;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1686;
				Match(LT);
				State = 1687;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1688;
				nonWildcardTypeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
		NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 232, RULE_nonWildcardTypeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1691;
			Match(LT);
			State = 1692;
			typeList();
			State = 1693;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 234, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695;
			typeType();
			State = 1700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1696;
				Match(COMMA);
				State = 1697;
				typeType();
				}
				}
				State = 1702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParser.RBRACK, i);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 236, RULE_typeType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1703;
					annotation();
					}
					} 
				}
				State = 1708;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,210,Context);
			}
			State = 1711;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				{
				State = 1709;
				classOrInterfaceType();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				State = 1710;
				primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1723;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1716;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (MODULE - 51)) | (1L << (OPEN - 51)) | (1L << (REQUIRES - 51)) | (1L << (EXPORTS - 51)) | (1L << (OPENS - 51)) | (1L << (TO - 51)) | (1L << (USES - 51)) | (1L << (PROVIDES - 51)) | (1L << (WITH - 51)) | (1L << (TRANSITIVE - 51)) | (1L << (VAR - 51)) | (1L << (YIELD - 51)) | (1L << (RECORD - 51)) | (1L << (SEALED - 51)) | (1L << (PERMITS - 51)))) != 0) || _la==AT || _la==IDENTIFIER) {
						{
						{
						State = 1713;
						annotation();
						}
						}
						State = 1718;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1719;
					Match(LBRACK);
					State = 1720;
					Match(RBRACK);
					}
					} 
				}
				State = 1725;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,213,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(JavaParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(JavaParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(JavaParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(JavaParser.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(JavaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(JavaParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(JavaParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(JavaParser.DOUBLE, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 238, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 240, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728;
			Match(LT);
			State = 1729;
			typeArgument();
			State = 1734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1730;
				Match(COMMA);
				State = 1731;
				typeArgument();
				}
				}
				State = 1736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1737;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public SuperSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterSuperSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitSuperSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperSuffixContext superSuffix() {
		SuperSuffixContext _localctx = new SuperSuffixContext(Context, State);
		EnterRule(_localctx, 242, RULE_superSuffix);
		int _la;
		try {
			State = 1748;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1739;
				arguments();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1740;
				Match(DOT);
				State = 1742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1741;
					typeArguments();
					}
				}

				State = 1744;
				identifier();
				State = 1746;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
				case 1:
					{
					State = 1745;
					arguments();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocationSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocationSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocationSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocationSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
		ExplicitGenericInvocationSuffixContext _localctx = new ExplicitGenericInvocationSuffixContext(Context, State);
		EnterRule(_localctx, 244, RULE_explicitGenericInvocationSuffix);
		try {
			State = 1755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1750;
				Match(SUPER);
				State = 1751;
				superSuffix();
				}
				break;
			case MODULE:
			case OPEN:
			case REQUIRES:
			case EXPORTS:
			case OPENS:
			case TO:
			case USES:
			case PROVIDES:
			case WITH:
			case TRANSITIVE:
			case VAR:
			case YIELD:
			case RECORD:
			case SEALED:
			case PERMITS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1752;
				identifier();
				State = 1753;
				arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 246, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1757;
			Match(LPAREN);
			State = 1759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (BOOLEAN - 3)) | (1L << (BYTE - 3)) | (1L << (CHAR - 3)) | (1L << (DOUBLE - 3)) | (1L << (FLOAT - 3)) | (1L << (INT - 3)) | (1L << (LONG - 3)) | (1L << (NEW - 3)) | (1L << (SHORT - 3)) | (1L << (SUPER - 3)) | (1L << (SWITCH - 3)) | (1L << (THIS - 3)) | (1L << (VOID - 3)) | (1L << (MODULE - 3)) | (1L << (OPEN - 3)) | (1L << (REQUIRES - 3)) | (1L << (EXPORTS - 3)) | (1L << (OPENS - 3)) | (1L << (TO - 3)) | (1L << (USES - 3)) | (1L << (PROVIDES - 3)) | (1L << (WITH - 3)) | (1L << (TRANSITIVE - 3)) | (1L << (VAR - 3)) | (1L << (YIELD - 3)) | (1L << (RECORD - 3)) | (1L << (SEALED - 3)) | (1L << (PERMITS - 3)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DECIMAL_LITERAL - 67)) | (1L << (HEX_LITERAL - 67)) | (1L << (OCT_LITERAL - 67)) | (1L << (BINARY_LITERAL - 67)) | (1L << (FLOAT_LITERAL - 67)) | (1L << (HEX_FLOAT_LITERAL - 67)) | (1L << (BOOL_LITERAL - 67)) | (1L << (CHAR_LITERAL - 67)) | (1L << (STRING_LITERAL - 67)) | (1L << (TEXT_BLOCK - 67)) | (1L << (NULL_LITERAL - 67)) | (1L << (LPAREN - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				State = 1758;
				expressionList();
				}
			}

			State = 1761;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 97: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 105: return guardedPattern_sempred((GuardedPatternContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 6);
		case 12: return Precpred(Context, 26);
		case 13: return Precpred(Context, 25);
		case 14: return Precpred(Context, 21);
		case 15: return Precpred(Context, 14);
		case 16: return Precpred(Context, 3);
		}
		return true;
	}
	private bool guardedPattern_sempred(GuardedPatternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,128,1764,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,1,0,3,0,250,8,0,1,0,5,0,253,8,0,10,0,12,0,256,9,0,1,0,5,0,
		259,8,0,10,0,12,0,262,9,0,1,0,1,0,1,0,3,0,267,8,0,1,1,5,1,270,8,1,10,1,
		12,1,273,9,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,281,8,2,1,2,1,2,1,2,3,2,286,8,
		2,1,2,1,2,1,3,5,3,291,8,3,10,3,12,3,294,9,3,1,3,1,3,1,3,1,3,1,3,3,3,301,
		8,3,1,3,3,3,304,8,3,1,4,1,4,1,4,1,4,1,4,3,4,311,8,4,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,3,5,323,8,5,1,6,1,6,3,6,327,8,6,1,7,1,7,1,7,3,7,
		332,8,7,1,7,1,7,3,7,336,8,7,1,7,1,7,3,7,340,8,7,1,7,1,7,3,7,344,8,7,1,
		7,1,7,1,8,1,8,1,8,1,8,5,8,352,8,8,10,8,12,8,355,9,8,1,8,1,8,1,9,5,9,360,
		8,9,10,9,12,9,363,9,9,1,9,1,9,1,9,5,9,368,8,9,10,9,12,9,371,9,9,1,9,3,
		9,374,8,9,1,10,1,10,1,10,5,10,379,8,10,10,10,12,10,382,9,10,1,11,1,11,
		1,11,1,11,3,11,388,8,11,1,11,1,11,3,11,392,8,11,1,11,3,11,395,8,11,1,11,
		3,11,398,8,11,1,11,1,11,1,12,1,12,1,12,5,12,405,8,12,10,12,12,12,408,9,
		12,1,13,5,13,411,8,13,10,13,12,13,414,9,13,1,13,1,13,3,13,418,8,13,1,13,
		3,13,421,8,13,1,14,1,14,5,14,425,8,14,10,14,12,14,428,9,14,1,15,1,15,1,
		15,3,15,433,8,15,1,15,1,15,3,15,437,8,15,1,15,1,15,3,15,441,8,15,1,15,
		1,15,1,16,1,16,5,16,447,8,16,10,16,12,16,450,9,16,1,16,1,16,1,17,1,17,
		5,17,456,8,17,10,17,12,17,459,9,17,1,17,1,17,1,18,1,18,3,18,465,8,18,1,
		18,1,18,5,18,469,8,18,10,18,12,18,472,9,18,1,18,3,18,475,8,18,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,487,8,19,1,20,1,20,1,20,1,
		20,1,20,5,20,494,8,20,10,20,12,20,497,9,20,1,20,1,20,3,20,501,8,20,1,20,
		1,20,1,21,1,21,3,21,507,8,21,1,22,1,22,3,22,511,8,22,1,23,1,23,1,23,1,
		24,1,24,1,24,1,25,1,25,1,25,1,25,3,25,523,8,25,1,25,1,25,1,26,1,26,1,26,
		1,26,1,27,5,27,532,8,27,10,27,12,27,535,9,27,1,27,1,27,3,27,539,8,27,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,549,8,28,1,29,1,29,1,29,1,29,
		5,29,555,8,29,10,29,12,29,558,9,29,1,29,1,29,1,30,1,30,1,30,5,30,565,8,
		30,10,30,12,30,568,9,30,1,30,1,30,1,30,1,31,5,31,574,8,31,10,31,12,31,
		577,9,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,587,8,32,1,33,5,
		33,590,8,33,10,33,12,33,593,9,33,1,33,1,33,1,33,1,34,5,34,599,8,34,10,
		34,12,34,602,9,34,1,34,1,34,1,34,1,34,1,34,5,34,609,8,34,10,34,12,34,612,
		9,34,1,34,1,34,3,34,616,8,34,1,34,1,34,1,35,1,35,1,35,5,35,623,8,35,10,
		35,12,35,626,9,35,1,36,1,36,1,36,3,36,631,8,36,1,37,1,37,1,37,5,37,636,
		8,37,10,37,12,37,639,9,37,1,38,1,38,3,38,643,8,38,1,39,1,39,1,39,1,39,
		5,39,649,8,39,10,39,12,39,652,9,39,1,39,3,39,655,8,39,3,39,657,8,39,1,
		39,1,39,1,40,1,40,3,40,663,8,40,1,40,1,40,1,40,3,40,668,8,40,5,40,670,
		8,40,10,40,12,40,673,9,40,1,41,1,41,5,41,677,8,41,10,41,12,41,680,9,41,
		1,41,1,41,1,41,3,41,685,8,41,3,41,687,8,41,1,42,1,42,1,42,5,42,692,8,42,
		10,42,12,42,695,9,42,1,43,1,43,3,43,699,8,43,1,43,1,43,1,43,3,43,704,8,
		43,1,43,3,43,707,8,43,3,43,709,8,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,
		717,8,44,10,44,12,44,720,9,44,1,44,1,44,1,45,1,45,1,45,5,45,727,8,45,10,
		45,12,45,730,9,45,1,45,1,45,3,45,734,8,45,1,45,3,45,737,8,45,1,46,5,46,
		740,8,46,10,46,12,46,743,9,46,1,46,1,46,1,46,1,47,5,47,749,8,47,10,47,
		12,47,752,9,47,1,47,1,47,5,47,756,8,47,10,47,12,47,759,9,47,1,47,1,47,
		1,47,1,48,1,48,1,48,5,48,767,8,48,10,48,12,48,770,9,48,1,49,5,49,773,8,
		49,10,49,12,49,776,9,49,1,49,1,49,1,49,1,50,1,50,1,50,5,50,784,8,50,10,
		50,12,50,787,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,796,8,51,1,52,
		1,52,1,53,1,53,1,54,1,54,1,54,5,54,805,8,54,10,54,12,54,808,9,54,1,54,
		1,54,1,54,1,55,1,55,1,55,3,55,816,8,55,1,55,1,55,1,55,3,55,821,8,55,1,
		55,3,55,824,8,55,1,56,1,56,1,56,5,56,829,8,56,10,56,12,56,832,9,56,1,57,
		1,57,1,57,1,57,1,58,1,58,1,58,3,58,841,8,58,1,59,1,59,1,59,1,59,5,59,847,
		8,59,10,59,12,59,850,9,59,3,59,852,8,59,1,59,3,59,855,8,59,1,59,1,59,1,
		60,1,60,1,60,1,60,1,60,1,61,1,61,5,61,866,8,61,10,61,12,61,869,9,61,1,
		61,1,61,1,62,5,62,874,8,62,10,62,12,62,877,9,62,1,62,1,62,3,62,881,8,62,
		1,63,1,63,1,63,1,63,1,63,1,63,3,63,889,8,63,1,63,1,63,3,63,893,8,63,1,
		63,1,63,3,63,897,8,63,1,63,1,63,3,63,901,8,63,1,63,1,63,3,63,905,8,63,
		3,63,907,8,63,1,64,1,64,3,64,911,8,64,1,65,1,65,1,65,1,65,3,65,917,8,65,
		1,66,1,66,1,67,1,67,1,67,1,68,3,68,925,8,68,1,68,1,68,1,68,1,68,1,69,1,
		69,5,69,933,8,69,10,69,12,69,936,9,69,1,69,1,69,1,70,1,70,5,70,942,8,70,
		10,70,12,70,945,9,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,954,8,70,
		1,70,1,70,1,70,1,70,1,70,1,70,3,70,962,8,70,1,70,1,70,1,70,1,70,1,70,1,
		70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,976,8,70,1,71,1,71,1,72,1,72,1,72,
		3,72,983,8,72,1,72,1,72,1,72,3,72,988,8,72,1,72,1,72,1,73,1,73,3,73,994,
		8,73,1,73,1,73,1,74,1,74,1,74,5,74,1001,8,74,10,74,12,74,1004,9,74,1,75,
		1,75,1,75,1,76,1,76,5,76,1011,8,76,10,76,12,76,1014,9,76,1,76,1,76,1,77,
		1,77,5,77,1020,8,77,10,77,12,77,1023,9,77,1,77,1,77,1,78,1,78,1,78,1,78,
		1,78,3,78,1032,8,78,1,79,5,79,1035,8,79,10,79,12,79,1038,9,79,1,79,1,79,
		1,79,1,79,1,79,1,79,1,79,1,79,3,79,1048,8,79,1,80,1,80,1,81,5,81,1053,
		8,81,10,81,12,81,1056,9,81,1,81,1,81,1,81,3,81,1061,8,81,1,81,3,81,1064,
		8,81,1,82,1,82,1,82,1,82,1,82,3,82,1071,8,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,3,82,1080,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
		1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,4,82,1101,8,82,11,82,
		12,82,1102,1,82,3,82,1106,8,82,1,82,3,82,1109,8,82,1,82,1,82,1,82,1,82,
		5,82,1115,8,82,10,82,12,82,1118,9,82,1,82,3,82,1121,8,82,1,82,1,82,1,82,
		1,82,5,82,1127,8,82,10,82,12,82,1130,9,82,1,82,5,82,1133,8,82,10,82,12,
		82,1136,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1146,8,82,1,
		82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1155,8,82,1,82,1,82,1,82,3,82,1160,
		8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1173,
		8,82,1,82,1,82,1,82,1,82,3,82,1179,8,82,1,83,1,83,1,83,5,83,1184,8,83,
		10,83,12,83,1187,9,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,5,84,1197,
		8,84,10,84,12,84,1200,9,84,1,85,1,85,1,85,1,86,1,86,1,86,3,86,1208,8,86,
		1,86,1,86,1,87,1,87,1,87,5,87,1215,8,87,10,87,12,87,1218,9,87,1,88,5,88,
		1221,8,88,10,88,12,88,1224,9,88,1,88,1,88,1,88,1,88,1,88,3,88,1231,8,88,
		1,88,1,88,1,88,1,88,3,88,1237,8,88,1,89,4,89,1240,8,89,11,89,12,89,1241,
		1,89,4,89,1245,8,89,11,89,12,89,1246,1,90,1,90,1,90,1,90,1,90,1,90,3,90,
		1255,8,90,1,90,1,90,1,90,3,90,1260,8,90,1,91,1,91,3,91,1264,8,91,1,91,
		1,91,3,91,1268,8,91,1,91,1,91,3,91,1272,8,91,3,91,1274,8,91,1,92,1,92,
		3,92,1278,8,92,1,93,5,93,1281,8,93,10,93,12,93,1284,9,93,1,93,1,93,3,93,
		1288,8,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,5,95,
		1301,8,95,10,95,12,95,1304,9,95,1,96,1,96,1,96,3,96,1309,8,96,1,96,1,96,
		1,96,1,96,1,96,3,96,1316,8,96,1,96,1,96,1,96,1,96,3,96,1322,8,96,1,96,
		3,96,1325,8,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,5,97,1334,8,97,10,97,
		12,97,1337,9,97,1,97,1,97,1,97,5,97,1342,8,97,10,97,12,97,1345,9,97,1,
		97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1359,8,
		97,1,97,1,97,3,97,1363,8,97,1,97,1,97,1,97,3,97,1368,8,97,1,97,1,97,3,
		97,1372,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
		97,1,97,1,97,3,97,1388,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
		97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
		97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
		97,1,97,3,97,1428,8,97,1,97,1,97,1,97,1,97,3,97,1434,8,97,1,97,1,97,1,
		97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1447,8,97,1,97,1,97,1,
		97,3,97,1452,8,97,1,97,5,97,1455,8,97,10,97,12,97,1458,9,97,1,98,5,98,
		1461,8,98,10,98,12,98,1464,9,98,1,98,1,98,5,98,1468,8,98,10,98,12,98,1471,
		9,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,3,100,1482,8,100,
		1,100,1,100,1,100,1,100,1,100,5,100,1489,8,100,10,100,12,100,1492,9,100,
		1,100,1,100,1,100,1,100,3,100,1498,8,100,1,100,3,100,1501,8,100,1,101,
		1,101,3,101,1505,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
		1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1523,8,102,3,102,
		1525,8,102,1,103,1,103,1,103,1,103,5,103,1531,8,103,10,103,12,103,1534,
		9,103,1,103,1,103,1,104,1,104,1,104,1,104,3,104,1542,8,104,1,104,1,104,
		1,104,1,104,1,104,3,104,1549,8,104,1,105,1,105,1,105,1,105,1,105,1,105,
		5,105,1557,8,105,10,105,12,105,1560,9,105,1,105,1,105,5,105,1564,8,105,
		10,105,12,105,1567,9,105,1,105,1,105,1,105,5,105,1572,8,105,10,105,12,
		105,1575,9,105,3,105,1577,8,105,1,105,1,105,1,105,5,105,1582,8,105,10,
		105,12,105,1585,9,105,1,106,1,106,5,106,1589,8,106,10,106,12,106,1592,
		9,106,3,106,1594,8,106,1,107,1,107,1,107,3,107,1599,8,107,1,107,5,107,
		1602,8,107,10,107,12,107,1605,9,107,1,107,1,107,3,107,1609,8,107,1,108,
		1,108,1,108,1,108,1,108,1,108,1,108,3,108,1618,8,108,3,108,1620,8,108,
		1,109,1,109,3,109,1624,8,109,1,109,1,109,1,109,3,109,1629,8,109,5,109,
		1631,8,109,10,109,12,109,1634,9,109,1,109,3,109,1637,8,109,1,110,1,110,
		3,110,1641,8,110,1,110,1,110,1,111,1,111,1,111,1,111,5,111,1649,8,111,
		10,111,12,111,1652,9,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,5,111,
		1661,8,111,10,111,12,111,1664,9,111,1,111,1,111,5,111,1668,8,111,10,111,
		12,111,1671,9,111,3,111,1673,8,111,1,112,1,112,3,112,1677,8,112,1,113,
		1,113,1,113,1,114,1,114,1,114,3,114,1685,8,114,1,115,1,115,1,115,3,115,
		1690,8,115,1,116,1,116,1,116,1,116,1,117,1,117,1,117,5,117,1699,8,117,
		10,117,12,117,1702,9,117,1,118,5,118,1705,8,118,10,118,12,118,1708,9,118,
		1,118,1,118,3,118,1712,8,118,1,118,5,118,1715,8,118,10,118,12,118,1718,
		9,118,1,118,1,118,5,118,1722,8,118,10,118,12,118,1725,9,118,1,119,1,119,
		1,120,1,120,1,120,1,120,5,120,1733,8,120,10,120,12,120,1736,9,120,1,120,
		1,120,1,121,1,121,1,121,3,121,1743,8,121,1,121,1,121,3,121,1747,8,121,
		3,121,1749,8,121,1,122,1,122,1,122,1,122,1,122,3,122,1756,8,122,1,123,
		1,123,3,123,1760,8,123,1,123,1,123,1,123,0,2,194,210,124,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
		106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
		142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
		178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
		214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,0,
		15,2,0,17,17,40,40,1,0,67,70,1,0,71,72,2,0,38,38,60,60,2,0,51,65,128,128,
		1,0,100,103,1,0,90,91,2,0,104,105,109,109,1,0,102,103,2,0,88,89,95,96,
		2,0,94,94,97,97,2,0,87,87,110,120,1,0,100,101,2,0,93,93,121,121,8,0,3,
		3,5,5,8,8,14,14,20,20,27,27,29,29,37,37,1964,0,266,1,0,0,0,2,271,1,0,0,
		0,4,278,1,0,0,0,6,303,1,0,0,0,8,310,1,0,0,0,10,322,1,0,0,0,12,326,1,0,
		0,0,14,328,1,0,0,0,16,347,1,0,0,0,18,361,1,0,0,0,20,375,1,0,0,0,22,383,
		1,0,0,0,24,401,1,0,0,0,26,412,1,0,0,0,28,422,1,0,0,0,30,429,1,0,0,0,32,
		444,1,0,0,0,34,453,1,0,0,0,36,474,1,0,0,0,38,486,1,0,0,0,40,488,1,0,0,
		0,42,506,1,0,0,0,44,510,1,0,0,0,46,512,1,0,0,0,48,515,1,0,0,0,50,518,1,
		0,0,0,52,526,1,0,0,0,54,538,1,0,0,0,56,548,1,0,0,0,58,550,1,0,0,0,60,561,
		1,0,0,0,62,575,1,0,0,0,64,586,1,0,0,0,66,591,1,0,0,0,68,600,1,0,0,0,70,
		619,1,0,0,0,72,627,1,0,0,0,74,632,1,0,0,0,76,642,1,0,0,0,78,644,1,0,0,
		0,80,660,1,0,0,0,82,686,1,0,0,0,84,688,1,0,0,0,86,696,1,0,0,0,88,712,1,
		0,0,0,90,736,1,0,0,0,92,741,1,0,0,0,94,750,1,0,0,0,96,763,1,0,0,0,98,774,
		1,0,0,0,100,780,1,0,0,0,102,795,1,0,0,0,104,797,1,0,0,0,106,799,1,0,0,
		0,108,806,1,0,0,0,110,815,1,0,0,0,112,825,1,0,0,0,114,833,1,0,0,0,116,
		840,1,0,0,0,118,842,1,0,0,0,120,858,1,0,0,0,122,863,1,0,0,0,124,880,1,
		0,0,0,126,906,1,0,0,0,128,910,1,0,0,0,130,912,1,0,0,0,132,918,1,0,0,0,
		134,920,1,0,0,0,136,924,1,0,0,0,138,930,1,0,0,0,140,975,1,0,0,0,142,977,
		1,0,0,0,144,979,1,0,0,0,146,991,1,0,0,0,148,997,1,0,0,0,150,1005,1,0,0,
		0,152,1008,1,0,0,0,154,1017,1,0,0,0,156,1031,1,0,0,0,158,1036,1,0,0,0,
		160,1049,1,0,0,0,162,1063,1,0,0,0,164,1178,1,0,0,0,166,1180,1,0,0,0,168,
		1193,1,0,0,0,170,1201,1,0,0,0,172,1204,1,0,0,0,174,1211,1,0,0,0,176,1236,
		1,0,0,0,178,1239,1,0,0,0,180,1259,1,0,0,0,182,1273,1,0,0,0,184,1277,1,
		0,0,0,186,1282,1,0,0,0,188,1293,1,0,0,0,190,1297,1,0,0,0,192,1324,1,0,
		0,0,194,1371,1,0,0,0,196,1462,1,0,0,0,198,1474,1,0,0,0,200,1500,1,0,0,
		0,202,1504,1,0,0,0,204,1524,1,0,0,0,206,1526,1,0,0,0,208,1548,1,0,0,0,
		210,1576,1,0,0,0,212,1593,1,0,0,0,214,1598,1,0,0,0,216,1619,1,0,0,0,218,
		1636,1,0,0,0,220,1638,1,0,0,0,222,1644,1,0,0,0,224,1674,1,0,0,0,226,1678,
		1,0,0,0,228,1684,1,0,0,0,230,1689,1,0,0,0,232,1691,1,0,0,0,234,1695,1,
		0,0,0,236,1706,1,0,0,0,238,1726,1,0,0,0,240,1728,1,0,0,0,242,1748,1,0,
		0,0,244,1755,1,0,0,0,246,1757,1,0,0,0,248,250,3,2,1,0,249,248,1,0,0,0,
		249,250,1,0,0,0,250,254,1,0,0,0,251,253,3,4,2,0,252,251,1,0,0,0,253,256,
		1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,260,1,0,0,0,256,254,1,0,0,
		0,257,259,3,6,3,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,
		261,1,0,0,0,261,267,1,0,0,0,262,260,1,0,0,0,263,264,3,136,68,0,264,265,
		5,0,0,1,265,267,1,0,0,0,266,249,1,0,0,0,266,263,1,0,0,0,267,1,1,0,0,0,
		268,270,3,110,55,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,
		272,1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,275,5,32,0,0,275,276,3,
		100,50,0,276,277,5,84,0,0,277,3,1,0,0,0,278,280,5,25,0,0,279,281,5,38,
		0,0,280,279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,285,3,100,50,0,
		283,284,5,86,0,0,284,286,5,104,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,
		287,1,0,0,0,287,288,5,84,0,0,288,5,1,0,0,0,289,291,3,10,5,0,290,289,1,
		0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,300,1,0,0,0,
		294,292,1,0,0,0,295,301,3,14,7,0,296,301,3,22,11,0,297,301,3,30,15,0,298,
		301,3,120,60,0,299,301,3,144,72,0,300,295,1,0,0,0,300,296,1,0,0,0,300,
		297,1,0,0,0,300,298,1,0,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,304,5,
		84,0,0,303,292,1,0,0,0,303,302,1,0,0,0,304,7,1,0,0,0,305,311,3,10,5,0,
		306,311,5,30,0,0,307,311,5,42,0,0,308,311,5,46,0,0,309,311,5,49,0,0,310,
		305,1,0,0,0,310,306,1,0,0,0,310,307,1,0,0,0,310,308,1,0,0,0,310,309,1,
		0,0,0,311,9,1,0,0,0,312,323,3,110,55,0,313,323,5,35,0,0,314,323,5,34,0,
		0,315,323,5,33,0,0,316,323,5,38,0,0,317,323,5,1,0,0,318,323,5,18,0,0,319,
		323,5,39,0,0,320,323,5,64,0,0,321,323,5,66,0,0,322,312,1,0,0,0,322,313,
		1,0,0,0,322,314,1,0,0,0,322,315,1,0,0,0,322,316,1,0,0,0,322,317,1,0,0,
		0,322,318,1,0,0,0,322,319,1,0,0,0,322,320,1,0,0,0,322,321,1,0,0,0,323,
		11,1,0,0,0,324,327,5,18,0,0,325,327,3,110,55,0,326,324,1,0,0,0,326,325,
		1,0,0,0,327,13,1,0,0,0,328,329,5,9,0,0,329,331,3,160,80,0,330,332,3,16,
		8,0,331,330,1,0,0,0,331,332,1,0,0,0,332,335,1,0,0,0,333,334,5,17,0,0,334,
		336,3,236,118,0,335,333,1,0,0,0,335,336,1,0,0,0,336,339,1,0,0,0,337,338,
		5,24,0,0,338,340,3,234,117,0,339,337,1,0,0,0,339,340,1,0,0,0,340,343,1,
		0,0,0,341,342,5,65,0,0,342,344,3,234,117,0,343,341,1,0,0,0,343,344,1,0,
		0,0,344,345,1,0,0,0,345,346,3,32,16,0,346,15,1,0,0,0,347,348,5,89,0,0,
		348,353,3,18,9,0,349,350,5,85,0,0,350,352,3,18,9,0,351,349,1,0,0,0,352,
		355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,356,1,0,0,0,355,353,1,
		0,0,0,356,357,5,88,0,0,357,17,1,0,0,0,358,360,3,110,55,0,359,358,1,0,0,
		0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,
		361,1,0,0,0,364,373,3,160,80,0,365,369,5,17,0,0,366,368,3,110,55,0,367,
		366,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,
		0,0,0,371,369,1,0,0,0,372,374,3,20,10,0,373,365,1,0,0,0,373,374,1,0,0,
		0,374,19,1,0,0,0,375,380,3,236,118,0,376,377,5,106,0,0,377,379,3,236,118,
		0,378,376,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,
		21,1,0,0,0,382,380,1,0,0,0,383,384,5,16,0,0,384,387,3,160,80,0,385,386,
		5,24,0,0,386,388,3,234,117,0,387,385,1,0,0,0,387,388,1,0,0,0,388,389,1,
		0,0,0,389,391,5,80,0,0,390,392,3,24,12,0,391,390,1,0,0,0,391,392,1,0,0,
		0,392,394,1,0,0,0,393,395,5,85,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,
		397,1,0,0,0,396,398,3,28,14,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,
		1,0,0,0,399,400,5,81,0,0,400,23,1,0,0,0,401,406,3,26,13,0,402,403,5,85,
		0,0,403,405,3,26,13,0,404,402,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,
		406,407,1,0,0,0,407,25,1,0,0,0,408,406,1,0,0,0,409,411,3,110,55,0,410,
		409,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,415,1,
		0,0,0,414,412,1,0,0,0,415,417,3,160,80,0,416,418,3,246,123,0,417,416,1,
		0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,421,3,32,16,0,420,419,1,0,0,
		0,420,421,1,0,0,0,421,27,1,0,0,0,422,426,5,84,0,0,423,425,3,36,18,0,424,
		423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,29,1,0,
		0,0,428,426,1,0,0,0,429,430,5,28,0,0,430,432,3,160,80,0,431,433,3,16,8,
		0,432,431,1,0,0,0,432,433,1,0,0,0,433,436,1,0,0,0,434,435,5,17,0,0,435,
		437,3,234,117,0,436,434,1,0,0,0,436,437,1,0,0,0,437,440,1,0,0,0,438,439,
		5,65,0,0,439,441,3,234,117,0,440,438,1,0,0,0,440,441,1,0,0,0,441,442,1,
		0,0,0,442,443,3,34,17,0,443,31,1,0,0,0,444,448,5,80,0,0,445,447,3,36,18,
		0,446,445,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,
		451,1,0,0,0,450,448,1,0,0,0,451,452,5,81,0,0,452,33,1,0,0,0,453,457,5,
		80,0,0,454,456,3,54,27,0,455,454,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,
		0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,0,460,461,5,81,0,0,461,
		35,1,0,0,0,462,475,5,84,0,0,463,465,5,38,0,0,464,463,1,0,0,0,464,465,1,
		0,0,0,465,466,1,0,0,0,466,475,3,154,77,0,467,469,3,8,4,0,468,467,1,0,0,
		0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,
		470,1,0,0,0,473,475,3,38,19,0,474,462,1,0,0,0,474,464,1,0,0,0,474,470,
		1,0,0,0,475,37,1,0,0,0,476,487,3,40,20,0,477,487,3,46,23,0,478,487,3,52,
		26,0,479,487,3,50,25,0,480,487,3,48,24,0,481,487,3,30,15,0,482,487,3,120,
		60,0,483,487,3,14,7,0,484,487,3,22,11,0,485,487,3,144,72,0,486,476,1,0,
		0,0,486,477,1,0,0,0,486,478,1,0,0,0,486,479,1,0,0,0,486,480,1,0,0,0,486,
		481,1,0,0,0,486,482,1,0,0,0,486,483,1,0,0,0,486,484,1,0,0,0,486,485,1,
		0,0,0,487,39,1,0,0,0,488,489,3,44,22,0,489,490,3,160,80,0,490,495,3,86,
		43,0,491,492,5,82,0,0,492,494,5,83,0,0,493,491,1,0,0,0,494,497,1,0,0,0,
		495,493,1,0,0,0,495,496,1,0,0,0,496,500,1,0,0,0,497,495,1,0,0,0,498,499,
		5,45,0,0,499,501,3,84,42,0,500,498,1,0,0,0,500,501,1,0,0,0,501,502,1,0,
		0,0,502,503,3,42,21,0,503,41,1,0,0,0,504,507,3,154,77,0,505,507,5,84,0,
		0,506,504,1,0,0,0,506,505,1,0,0,0,507,43,1,0,0,0,508,511,3,236,118,0,509,
		511,5,48,0,0,510,508,1,0,0,0,510,509,1,0,0,0,511,45,1,0,0,0,512,513,3,
		16,8,0,513,514,3,40,20,0,514,47,1,0,0,0,515,516,3,16,8,0,516,517,3,50,
		25,0,517,49,1,0,0,0,518,519,3,160,80,0,519,522,3,86,43,0,520,521,5,45,
		0,0,521,523,3,84,42,0,522,520,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,
		524,525,3,154,77,0,525,51,1,0,0,0,526,527,3,236,118,0,527,528,3,70,35,
		0,528,529,5,84,0,0,529,53,1,0,0,0,530,532,3,8,4,0,531,530,1,0,0,0,532,
		535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,
		0,0,0,536,539,3,56,28,0,537,539,5,84,0,0,538,533,1,0,0,0,538,537,1,0,0,
		0,539,55,1,0,0,0,540,549,3,58,29,0,541,549,3,62,31,0,542,549,3,66,33,0,
		543,549,3,30,15,0,544,549,3,120,60,0,545,549,3,14,7,0,546,549,3,22,11,
		0,547,549,3,144,72,0,548,540,1,0,0,0,548,541,1,0,0,0,548,542,1,0,0,0,548,
		543,1,0,0,0,548,544,1,0,0,0,548,545,1,0,0,0,548,546,1,0,0,0,548,547,1,
		0,0,0,549,57,1,0,0,0,550,551,3,236,118,0,551,556,3,60,30,0,552,553,5,85,
		0,0,553,555,3,60,30,0,554,552,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,
		556,557,1,0,0,0,557,559,1,0,0,0,558,556,1,0,0,0,559,560,5,84,0,0,560,59,
		1,0,0,0,561,566,3,160,80,0,562,563,5,82,0,0,563,565,5,83,0,0,564,562,1,
		0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,
		568,566,1,0,0,0,569,570,5,87,0,0,570,571,3,76,38,0,571,61,1,0,0,0,572,
		574,3,64,32,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,
		1,0,0,0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,3,68,34,0,579,63,1,0,0,
		0,580,587,3,110,55,0,581,587,5,35,0,0,582,587,5,1,0,0,583,587,5,12,0,0,
		584,587,5,38,0,0,585,587,5,39,0,0,586,580,1,0,0,0,586,581,1,0,0,0,586,
		582,1,0,0,0,586,583,1,0,0,0,586,584,1,0,0,0,586,585,1,0,0,0,587,65,1,0,
		0,0,588,590,3,64,32,0,589,588,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,
		591,592,1,0,0,0,592,594,1,0,0,0,593,591,1,0,0,0,594,595,3,16,8,0,595,596,
		3,68,34,0,596,67,1,0,0,0,597,599,3,110,55,0,598,597,1,0,0,0,599,602,1,
		0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,603,1,0,0,0,602,600,1,0,0,0,
		603,604,3,44,22,0,604,605,3,160,80,0,605,610,3,86,43,0,606,607,5,82,0,
		0,607,609,5,83,0,0,608,606,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,
		611,1,0,0,0,611,615,1,0,0,0,612,610,1,0,0,0,613,614,5,45,0,0,614,616,3,
		84,42,0,615,613,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,618,3,42,21,
		0,618,69,1,0,0,0,619,624,3,72,36,0,620,621,5,85,0,0,621,623,3,72,36,0,
		622,620,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,71,
		1,0,0,0,626,624,1,0,0,0,627,630,3,74,37,0,628,629,5,87,0,0,629,631,3,76,
		38,0,630,628,1,0,0,0,630,631,1,0,0,0,631,73,1,0,0,0,632,637,3,160,80,0,
		633,634,5,82,0,0,634,636,5,83,0,0,635,633,1,0,0,0,636,639,1,0,0,0,637,
		635,1,0,0,0,637,638,1,0,0,0,638,75,1,0,0,0,639,637,1,0,0,0,640,643,3,78,
		39,0,641,643,3,194,97,0,642,640,1,0,0,0,642,641,1,0,0,0,643,77,1,0,0,0,
		644,656,5,80,0,0,645,650,3,76,38,0,646,647,5,85,0,0,647,649,3,76,38,0,
		648,646,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,654,
		1,0,0,0,652,650,1,0,0,0,653,655,5,85,0,0,654,653,1,0,0,0,654,655,1,0,0,
		0,655,657,1,0,0,0,656,645,1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,
		659,5,81,0,0,659,79,1,0,0,0,660,662,3,160,80,0,661,663,3,240,120,0,662,
		661,1,0,0,0,662,663,1,0,0,0,663,671,1,0,0,0,664,665,5,86,0,0,665,667,3,
		160,80,0,666,668,3,240,120,0,667,666,1,0,0,0,667,668,1,0,0,0,668,670,1,
		0,0,0,669,664,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,
		672,81,1,0,0,0,673,671,1,0,0,0,674,687,3,236,118,0,675,677,3,110,55,0,
		676,675,1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,681,
		1,0,0,0,680,678,1,0,0,0,681,684,5,92,0,0,682,683,7,0,0,0,683,685,3,236,
		118,0,684,682,1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,0,686,674,1,0,0,0,
		686,678,1,0,0,0,687,83,1,0,0,0,688,693,3,100,50,0,689,690,5,85,0,0,690,
		692,3,100,50,0,691,689,1,0,0,0,692,695,1,0,0,0,693,691,1,0,0,0,693,694,
		1,0,0,0,694,85,1,0,0,0,695,693,1,0,0,0,696,708,5,78,0,0,697,699,3,88,44,
		0,698,697,1,0,0,0,698,699,1,0,0,0,699,709,1,0,0,0,700,703,3,88,44,0,701,
		702,5,85,0,0,702,704,3,90,45,0,703,701,1,0,0,0,703,704,1,0,0,0,704,709,
		1,0,0,0,705,707,3,90,45,0,706,705,1,0,0,0,706,707,1,0,0,0,707,709,1,0,
		0,0,708,698,1,0,0,0,708,700,1,0,0,0,708,706,1,0,0,0,709,710,1,0,0,0,710,
		711,5,79,0,0,711,87,1,0,0,0,712,718,3,236,118,0,713,714,3,160,80,0,714,
		715,5,86,0,0,715,717,1,0,0,0,716,713,1,0,0,0,717,720,1,0,0,0,718,716,1,
		0,0,0,718,719,1,0,0,0,719,721,1,0,0,0,720,718,1,0,0,0,721,722,5,43,0,0,
		722,89,1,0,0,0,723,728,3,92,46,0,724,725,5,85,0,0,725,727,3,92,46,0,726,
		724,1,0,0,0,727,730,1,0,0,0,728,726,1,0,0,0,728,729,1,0,0,0,729,733,1,
		0,0,0,730,728,1,0,0,0,731,732,5,85,0,0,732,734,3,94,47,0,733,731,1,0,0,
		0,733,734,1,0,0,0,734,737,1,0,0,0,735,737,3,94,47,0,736,723,1,0,0,0,736,
		735,1,0,0,0,737,91,1,0,0,0,738,740,3,12,6,0,739,738,1,0,0,0,740,743,1,
		0,0,0,741,739,1,0,0,0,741,742,1,0,0,0,742,744,1,0,0,0,743,741,1,0,0,0,
		744,745,3,236,118,0,745,746,3,74,37,0,746,93,1,0,0,0,747,749,3,12,6,0,
		748,747,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,753,
		1,0,0,0,752,750,1,0,0,0,753,757,3,236,118,0,754,756,3,110,55,0,755,754,
		1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,
		0,759,757,1,0,0,0,760,761,5,124,0,0,761,762,3,74,37,0,762,95,1,0,0,0,763,
		768,3,98,49,0,764,765,5,85,0,0,765,767,3,98,49,0,766,764,1,0,0,0,767,770,
		1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,97,1,0,0,0,770,768,1,0,0,0,
		771,773,3,12,6,0,772,771,1,0,0,0,773,776,1,0,0,0,774,772,1,0,0,0,774,775,
		1,0,0,0,775,777,1,0,0,0,776,774,1,0,0,0,777,778,5,61,0,0,778,779,3,160,
		80,0,779,99,1,0,0,0,780,785,3,160,80,0,781,782,5,86,0,0,782,784,3,160,
		80,0,783,781,1,0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,
		101,1,0,0,0,787,785,1,0,0,0,788,796,3,104,52,0,789,796,3,106,53,0,790,
		796,5,74,0,0,791,796,5,75,0,0,792,796,5,73,0,0,793,796,5,77,0,0,794,796,
		5,76,0,0,795,788,1,0,0,0,795,789,1,0,0,0,795,790,1,0,0,0,795,791,1,0,0,
		0,795,792,1,0,0,0,795,793,1,0,0,0,795,794,1,0,0,0,796,103,1,0,0,0,797,
		798,7,1,0,0,798,105,1,0,0,0,799,800,7,2,0,0,800,107,1,0,0,0,801,802,3,
		160,80,0,802,803,5,86,0,0,803,805,1,0,0,0,804,801,1,0,0,0,805,808,1,0,
		0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,806,1,0,0,0,809,
		810,5,123,0,0,810,811,3,160,80,0,811,109,1,0,0,0,812,813,5,123,0,0,813,
		816,3,100,50,0,814,816,3,108,54,0,815,812,1,0,0,0,815,814,1,0,0,0,816,
		823,1,0,0,0,817,820,5,78,0,0,818,821,3,112,56,0,819,821,3,116,58,0,820,
		818,1,0,0,0,820,819,1,0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,824,5,
		79,0,0,823,817,1,0,0,0,823,824,1,0,0,0,824,111,1,0,0,0,825,830,3,114,57,
		0,826,827,5,85,0,0,827,829,3,114,57,0,828,826,1,0,0,0,829,832,1,0,0,0,
		830,828,1,0,0,0,830,831,1,0,0,0,831,113,1,0,0,0,832,830,1,0,0,0,833,834,
		3,160,80,0,834,835,5,87,0,0,835,836,3,116,58,0,836,115,1,0,0,0,837,841,
		3,194,97,0,838,841,3,110,55,0,839,841,3,118,59,0,840,837,1,0,0,0,840,838,
		1,0,0,0,840,839,1,0,0,0,841,117,1,0,0,0,842,851,5,80,0,0,843,848,3,116,
		58,0,844,845,5,85,0,0,845,847,3,116,58,0,846,844,1,0,0,0,847,850,1,0,0,
		0,848,846,1,0,0,0,848,849,1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,851,
		843,1,0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,855,5,85,0,0,854,853,1,
		0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,857,5,81,0,0,857,119,1,0,0,0,
		858,859,5,123,0,0,859,860,5,28,0,0,860,861,3,160,80,0,861,862,3,122,61,
		0,862,121,1,0,0,0,863,867,5,80,0,0,864,866,3,124,62,0,865,864,1,0,0,0,
		866,869,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,870,1,0,0,0,869,867,
		1,0,0,0,870,871,5,81,0,0,871,123,1,0,0,0,872,874,3,8,4,0,873,872,1,0,0,
		0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,878,1,0,0,0,877,
		875,1,0,0,0,878,881,3,126,63,0,879,881,5,84,0,0,880,875,1,0,0,0,880,879,
		1,0,0,0,881,125,1,0,0,0,882,883,3,236,118,0,883,884,3,128,64,0,884,885,
		5,84,0,0,885,907,1,0,0,0,886,888,3,14,7,0,887,889,5,84,0,0,888,887,1,0,
		0,0,888,889,1,0,0,0,889,907,1,0,0,0,890,892,3,30,15,0,891,893,5,84,0,0,
		892,891,1,0,0,0,892,893,1,0,0,0,893,907,1,0,0,0,894,896,3,22,11,0,895,
		897,5,84,0,0,896,895,1,0,0,0,896,897,1,0,0,0,897,907,1,0,0,0,898,900,3,
		120,60,0,899,901,5,84,0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,907,1,0,
		0,0,902,904,3,144,72,0,903,905,5,84,0,0,904,903,1,0,0,0,904,905,1,0,0,
		0,905,907,1,0,0,0,906,882,1,0,0,0,906,886,1,0,0,0,906,890,1,0,0,0,906,
		894,1,0,0,0,906,898,1,0,0,0,906,902,1,0,0,0,907,127,1,0,0,0,908,911,3,
		130,65,0,909,911,3,132,66,0,910,908,1,0,0,0,910,909,1,0,0,0,911,129,1,
		0,0,0,912,913,3,160,80,0,913,914,5,78,0,0,914,916,5,79,0,0,915,917,3,134,
		67,0,916,915,1,0,0,0,916,917,1,0,0,0,917,131,1,0,0,0,918,919,3,70,35,0,
		919,133,1,0,0,0,920,921,5,12,0,0,921,922,3,116,58,0,922,135,1,0,0,0,923,
		925,5,52,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,926,1,0,0,0,926,927,5,
		51,0,0,927,928,3,100,50,0,928,929,3,138,69,0,929,137,1,0,0,0,930,934,5,
		80,0,0,931,933,3,140,70,0,932,931,1,0,0,0,933,936,1,0,0,0,934,932,1,0,
		0,0,934,935,1,0,0,0,935,937,1,0,0,0,936,934,1,0,0,0,937,938,5,81,0,0,938,
		139,1,0,0,0,939,943,5,53,0,0,940,942,3,142,71,0,941,940,1,0,0,0,942,945,
		1,0,0,0,943,941,1,0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,943,1,0,0,
		0,946,947,3,100,50,0,947,948,5,84,0,0,948,976,1,0,0,0,949,950,5,54,0,0,
		950,953,3,100,50,0,951,952,5,56,0,0,952,954,3,100,50,0,953,951,1,0,0,0,
		953,954,1,0,0,0,954,955,1,0,0,0,955,956,5,84,0,0,956,976,1,0,0,0,957,958,
		5,55,0,0,958,961,3,100,50,0,959,960,5,56,0,0,960,962,3,100,50,0,961,959,
		1,0,0,0,961,962,1,0,0,0,962,963,1,0,0,0,963,964,5,84,0,0,964,976,1,0,0,
		0,965,966,5,57,0,0,966,967,3,100,50,0,967,968,5,84,0,0,968,976,1,0,0,0,
		969,970,5,58,0,0,970,971,3,100,50,0,971,972,5,59,0,0,972,973,3,100,50,
		0,973,974,5,84,0,0,974,976,1,0,0,0,975,939,1,0,0,0,975,949,1,0,0,0,975,
		957,1,0,0,0,975,965,1,0,0,0,975,969,1,0,0,0,976,141,1,0,0,0,977,978,7,
		3,0,0,978,143,1,0,0,0,979,980,5,63,0,0,980,982,3,160,80,0,981,983,3,16,
		8,0,982,981,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,987,3,146,73,0,
		985,986,5,24,0,0,986,988,3,234,117,0,987,985,1,0,0,0,987,988,1,0,0,0,988,
		989,1,0,0,0,989,990,3,152,76,0,990,145,1,0,0,0,991,993,5,78,0,0,992,994,
		3,148,74,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,79,
		0,0,996,147,1,0,0,0,997,1002,3,150,75,0,998,999,5,85,0,0,999,1001,3,150,
		75,0,1000,998,1,0,0,0,1001,1004,1,0,0,0,1002,1000,1,0,0,0,1002,1003,1,
		0,0,0,1003,149,1,0,0,0,1004,1002,1,0,0,0,1005,1006,3,236,118,0,1006,1007,
		3,160,80,0,1007,151,1,0,0,0,1008,1012,5,80,0,0,1009,1011,3,36,18,0,1010,
		1009,1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,
		1015,1,0,0,0,1014,1012,1,0,0,0,1015,1016,5,81,0,0,1016,153,1,0,0,0,1017,
		1021,5,80,0,0,1018,1020,3,156,78,0,1019,1018,1,0,0,0,1020,1023,1,0,0,0,
		1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1024,1,0,0,0,1023,1021,1,0,0,
		0,1024,1025,5,81,0,0,1025,155,1,0,0,0,1026,1027,3,158,79,0,1027,1028,5,
		84,0,0,1028,1032,1,0,0,0,1029,1032,3,164,82,0,1030,1032,3,162,81,0,1031,
		1026,1,0,0,0,1031,1029,1,0,0,0,1031,1030,1,0,0,0,1032,157,1,0,0,0,1033,
		1035,3,12,6,0,1034,1033,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,
		1037,1,0,0,0,1037,1047,1,0,0,0,1038,1036,1,0,0,0,1039,1040,3,236,118,0,
		1040,1041,3,70,35,0,1041,1048,1,0,0,0,1042,1043,5,61,0,0,1043,1044,3,160,
		80,0,1044,1045,5,87,0,0,1045,1046,3,194,97,0,1046,1048,1,0,0,0,1047,1039,
		1,0,0,0,1047,1042,1,0,0,0,1048,159,1,0,0,0,1049,1050,7,4,0,0,1050,161,
		1,0,0,0,1051,1053,3,10,5,0,1052,1051,1,0,0,0,1053,1056,1,0,0,0,1054,1052,
		1,0,0,0,1054,1055,1,0,0,0,1055,1060,1,0,0,0,1056,1054,1,0,0,0,1057,1061,
		3,14,7,0,1058,1061,3,30,15,0,1059,1061,3,144,72,0,1060,1057,1,0,0,0,1060,
		1058,1,0,0,0,1060,1059,1,0,0,0,1061,1064,1,0,0,0,1062,1064,5,84,0,0,1063,
		1054,1,0,0,0,1063,1062,1,0,0,0,1064,163,1,0,0,0,1065,1179,3,154,77,0,1066,
		1067,5,2,0,0,1067,1070,3,194,97,0,1068,1069,5,93,0,0,1069,1071,3,194,97,
		0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,1073,5,84,
		0,0,1073,1179,1,0,0,0,1074,1075,5,22,0,0,1075,1076,3,188,94,0,1076,1079,
		3,164,82,0,1077,1078,5,15,0,0,1078,1080,3,164,82,0,1079,1077,1,0,0,0,1079,
		1080,1,0,0,0,1080,1179,1,0,0,0,1081,1082,5,21,0,0,1082,1083,5,78,0,0,1083,
		1084,3,182,91,0,1084,1085,5,79,0,0,1085,1086,3,164,82,0,1086,1179,1,0,
		0,0,1087,1088,5,50,0,0,1088,1089,3,188,94,0,1089,1090,3,164,82,0,1090,
		1179,1,0,0,0,1091,1092,5,13,0,0,1092,1093,3,164,82,0,1093,1094,5,50,0,
		0,1094,1095,3,188,94,0,1095,1096,5,84,0,0,1096,1179,1,0,0,0,1097,1098,
		5,47,0,0,1098,1108,3,154,77,0,1099,1101,3,166,83,0,1100,1099,1,0,0,0,1101,
		1102,1,0,0,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,1105,1,0,0,0,1104,
		1106,3,170,85,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1109,1,0,0,0,
		1107,1109,3,170,85,0,1108,1100,1,0,0,0,1108,1107,1,0,0,0,1109,1179,1,0,
		0,0,1110,1111,5,47,0,0,1111,1112,3,172,86,0,1112,1116,3,154,77,0,1113,
		1115,3,166,83,0,1114,1113,1,0,0,0,1115,1118,1,0,0,0,1116,1114,1,0,0,0,
		1116,1117,1,0,0,0,1117,1120,1,0,0,0,1118,1116,1,0,0,0,1119,1121,3,170,
		85,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,1179,1,0,0,0,1122,1123,5,
		41,0,0,1123,1124,3,188,94,0,1124,1128,5,80,0,0,1125,1127,3,178,89,0,1126,
		1125,1,0,0,0,1127,1130,1,0,0,0,1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,
		1134,1,0,0,0,1130,1128,1,0,0,0,1131,1133,3,180,90,0,1132,1131,1,0,0,0,
		1133,1136,1,0,0,0,1134,1132,1,0,0,0,1134,1135,1,0,0,0,1135,1137,1,0,0,
		0,1136,1134,1,0,0,0,1137,1138,5,81,0,0,1138,1179,1,0,0,0,1139,1140,5,42,
		0,0,1140,1141,3,188,94,0,1141,1142,3,154,77,0,1142,1179,1,0,0,0,1143,1145,
		5,36,0,0,1144,1146,3,194,97,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,
		1147,1,0,0,0,1147,1179,5,84,0,0,1148,1149,5,44,0,0,1149,1150,3,194,97,
		0,1150,1151,5,84,0,0,1151,1179,1,0,0,0,1152,1154,5,4,0,0,1153,1155,3,160,
		80,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1179,5,
		84,0,0,1157,1159,5,11,0,0,1158,1160,3,160,80,0,1159,1158,1,0,0,0,1159,
		1160,1,0,0,0,1160,1161,1,0,0,0,1161,1179,5,84,0,0,1162,1163,5,62,0,0,1163,
		1164,3,194,97,0,1164,1165,5,84,0,0,1165,1179,1,0,0,0,1166,1179,5,84,0,
		0,1167,1168,3,194,97,0,1168,1169,5,84,0,0,1169,1179,1,0,0,0,1170,1172,
		3,206,103,0,1171,1173,5,84,0,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,
		1179,1,0,0,0,1174,1175,3,160,80,0,1175,1176,5,93,0,0,1176,1177,3,164,82,
		0,1177,1179,1,0,0,0,1178,1065,1,0,0,0,1178,1066,1,0,0,0,1178,1074,1,0,
		0,0,1178,1081,1,0,0,0,1178,1087,1,0,0,0,1178,1091,1,0,0,0,1178,1097,1,
		0,0,0,1178,1110,1,0,0,0,1178,1122,1,0,0,0,1178,1139,1,0,0,0,1178,1143,
		1,0,0,0,1178,1148,1,0,0,0,1178,1152,1,0,0,0,1178,1157,1,0,0,0,1178,1162,
		1,0,0,0,1178,1166,1,0,0,0,1178,1167,1,0,0,0,1178,1170,1,0,0,0,1178,1174,
		1,0,0,0,1179,165,1,0,0,0,1180,1181,5,7,0,0,1181,1185,5,78,0,0,1182,1184,
		3,12,6,0,1183,1182,1,0,0,0,1184,1187,1,0,0,0,1185,1183,1,0,0,0,1185,1186,
		1,0,0,0,1186,1188,1,0,0,0,1187,1185,1,0,0,0,1188,1189,3,168,84,0,1189,
		1190,3,160,80,0,1190,1191,5,79,0,0,1191,1192,3,154,77,0,1192,167,1,0,0,
		0,1193,1198,3,100,50,0,1194,1195,5,107,0,0,1195,1197,3,100,50,0,1196,1194,
		1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,1,0,0,0,1199,169,
		1,0,0,0,1200,1198,1,0,0,0,1201,1202,5,19,0,0,1202,1203,3,154,77,0,1203,
		171,1,0,0,0,1204,1205,5,78,0,0,1205,1207,3,174,87,0,1206,1208,5,84,0,0,
		1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,1210,5,79,0,
		0,1210,173,1,0,0,0,1211,1216,3,176,88,0,1212,1213,5,84,0,0,1213,1215,3,
		176,88,0,1214,1212,1,0,0,0,1215,1218,1,0,0,0,1216,1214,1,0,0,0,1216,1217,
		1,0,0,0,1217,175,1,0,0,0,1218,1216,1,0,0,0,1219,1221,3,12,6,0,1220,1219,
		1,0,0,0,1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,1230,
		1,0,0,0,1224,1222,1,0,0,0,1225,1226,3,80,40,0,1226,1227,3,74,37,0,1227,
		1231,1,0,0,0,1228,1229,5,61,0,0,1229,1231,3,160,80,0,1230,1225,1,0,0,0,
		1230,1228,1,0,0,0,1231,1232,1,0,0,0,1232,1233,5,87,0,0,1233,1234,3,194,
		97,0,1234,1237,1,0,0,0,1235,1237,3,160,80,0,1236,1222,1,0,0,0,1236,1235,
		1,0,0,0,1237,177,1,0,0,0,1238,1240,3,180,90,0,1239,1238,1,0,0,0,1240,1241,
		1,0,0,0,1241,1239,1,0,0,0,1241,1242,1,0,0,0,1242,1244,1,0,0,0,1243,1245,
		3,156,78,0,1244,1243,1,0,0,0,1245,1246,1,0,0,0,1246,1244,1,0,0,0,1246,
		1247,1,0,0,0,1247,179,1,0,0,0,1248,1254,5,6,0,0,1249,1255,3,194,97,0,1250,
		1255,5,128,0,0,1251,1252,3,236,118,0,1252,1253,3,160,80,0,1253,1255,1,
		0,0,0,1254,1249,1,0,0,0,1254,1250,1,0,0,0,1254,1251,1,0,0,0,1255,1256,
		1,0,0,0,1256,1260,5,93,0,0,1257,1258,5,12,0,0,1258,1260,5,93,0,0,1259,
		1248,1,0,0,0,1259,1257,1,0,0,0,1260,181,1,0,0,0,1261,1274,3,186,93,0,1262,
		1264,3,184,92,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,
		1265,1267,5,84,0,0,1266,1268,3,194,97,0,1267,1266,1,0,0,0,1267,1268,1,
		0,0,0,1268,1269,1,0,0,0,1269,1271,5,84,0,0,1270,1272,3,190,95,0,1271,1270,
		1,0,0,0,1271,1272,1,0,0,0,1272,1274,1,0,0,0,1273,1261,1,0,0,0,1273,1263,
		1,0,0,0,1274,183,1,0,0,0,1275,1278,3,158,79,0,1276,1278,3,190,95,0,1277,
		1275,1,0,0,0,1277,1276,1,0,0,0,1278,185,1,0,0,0,1279,1281,3,12,6,0,1280,
		1279,1,0,0,0,1281,1284,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,
		1287,1,0,0,0,1284,1282,1,0,0,0,1285,1288,3,236,118,0,1286,1288,5,61,0,
		0,1287,1285,1,0,0,0,1287,1286,1,0,0,0,1288,1289,1,0,0,0,1289,1290,3,74,
		37,0,1290,1291,5,93,0,0,1291,1292,3,194,97,0,1292,187,1,0,0,0,1293,1294,
		5,78,0,0,1294,1295,3,194,97,0,1295,1296,5,79,0,0,1296,189,1,0,0,0,1297,
		1302,3,194,97,0,1298,1299,5,85,0,0,1299,1301,3,194,97,0,1300,1298,1,0,
		0,0,1301,1304,1,0,0,0,1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,191,1,0,
		0,0,1304,1302,1,0,0,0,1305,1306,3,160,80,0,1306,1308,5,78,0,0,1307,1309,
		3,190,95,0,1308,1307,1,0,0,0,1308,1309,1,0,0,0,1309,1310,1,0,0,0,1310,
		1311,5,79,0,0,1311,1325,1,0,0,0,1312,1313,5,43,0,0,1313,1315,5,78,0,0,
		1314,1316,3,190,95,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,
		0,0,1317,1325,5,79,0,0,1318,1319,5,40,0,0,1319,1321,5,78,0,0,1320,1322,
		3,190,95,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,1323,1,0,0,0,1323,
		1325,5,79,0,0,1324,1305,1,0,0,0,1324,1312,1,0,0,0,1324,1318,1,0,0,0,1325,
		193,1,0,0,0,1326,1327,6,97,-1,0,1327,1372,3,204,102,0,1328,1372,3,192,
		96,0,1329,1330,5,31,0,0,1330,1372,3,216,108,0,1331,1335,5,78,0,0,1332,
		1334,3,110,55,0,1333,1332,1,0,0,0,1334,1337,1,0,0,0,1335,1333,1,0,0,0,
		1335,1336,1,0,0,0,1336,1338,1,0,0,0,1337,1335,1,0,0,0,1338,1343,3,236,
		118,0,1339,1340,5,106,0,0,1340,1342,3,236,118,0,1341,1339,1,0,0,0,1342,
		1345,1,0,0,0,1343,1341,1,0,0,0,1343,1344,1,0,0,0,1344,1346,1,0,0,0,1345,
		1343,1,0,0,0,1346,1347,5,79,0,0,1347,1348,3,194,97,22,1348,1372,1,0,0,
		0,1349,1350,7,5,0,0,1350,1372,3,194,97,20,1351,1352,7,6,0,0,1352,1372,
		3,194,97,19,1353,1372,3,198,99,0,1354,1372,3,206,103,0,1355,1356,3,236,
		118,0,1356,1362,5,122,0,0,1357,1359,3,240,120,0,1358,1357,1,0,0,0,1358,
		1359,1,0,0,0,1359,1360,1,0,0,0,1360,1363,3,160,80,0,1361,1363,5,31,0,0,
		1362,1358,1,0,0,0,1362,1361,1,0,0,0,1363,1372,1,0,0,0,1364,1365,3,214,
		107,0,1365,1367,5,122,0,0,1366,1368,3,240,120,0,1367,1366,1,0,0,0,1367,
		1368,1,0,0,0,1368,1369,1,0,0,0,1369,1370,5,31,0,0,1370,1372,1,0,0,0,1371,
		1326,1,0,0,0,1371,1328,1,0,0,0,1371,1329,1,0,0,0,1371,1331,1,0,0,0,1371,
		1349,1,0,0,0,1371,1351,1,0,0,0,1371,1353,1,0,0,0,1371,1354,1,0,0,0,1371,
		1355,1,0,0,0,1371,1364,1,0,0,0,1372,1456,1,0,0,0,1373,1374,10,18,0,0,1374,
		1375,7,7,0,0,1375,1455,3,194,97,19,1376,1377,10,17,0,0,1377,1378,7,8,0,
		0,1378,1455,3,194,97,18,1379,1387,10,16,0,0,1380,1381,5,89,0,0,1381,1388,
		5,89,0,0,1382,1383,5,88,0,0,1383,1384,5,88,0,0,1384,1388,5,88,0,0,1385,
		1386,5,88,0,0,1386,1388,5,88,0,0,1387,1380,1,0,0,0,1387,1382,1,0,0,0,1387,
		1385,1,0,0,0,1388,1389,1,0,0,0,1389,1455,3,194,97,17,1390,1391,10,15,0,
		0,1391,1392,7,9,0,0,1392,1455,3,194,97,16,1393,1394,10,13,0,0,1394,1395,
		7,10,0,0,1395,1455,3,194,97,14,1396,1397,10,12,0,0,1397,1398,5,106,0,0,
		1398,1455,3,194,97,13,1399,1400,10,11,0,0,1400,1401,5,108,0,0,1401,1455,
		3,194,97,12,1402,1403,10,10,0,0,1403,1404,5,107,0,0,1404,1455,3,194,97,
		11,1405,1406,10,9,0,0,1406,1407,5,98,0,0,1407,1455,3,194,97,10,1408,1409,
		10,8,0,0,1409,1410,5,99,0,0,1410,1455,3,194,97,9,1411,1412,10,7,0,0,1412,
		1413,5,92,0,0,1413,1414,3,194,97,0,1414,1415,5,93,0,0,1415,1416,3,194,
		97,7,1416,1455,1,0,0,0,1417,1418,10,6,0,0,1418,1419,7,11,0,0,1419,1455,
		3,194,97,6,1420,1421,10,26,0,0,1421,1433,5,86,0,0,1422,1434,3,160,80,0,
		1423,1434,3,192,96,0,1424,1434,5,43,0,0,1425,1427,5,31,0,0,1426,1428,3,
		232,116,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1434,
		3,220,110,0,1430,1431,5,40,0,0,1431,1434,3,242,121,0,1432,1434,3,226,113,
		0,1433,1422,1,0,0,0,1433,1423,1,0,0,0,1433,1424,1,0,0,0,1433,1425,1,0,
		0,0,1433,1430,1,0,0,0,1433,1432,1,0,0,0,1434,1455,1,0,0,0,1435,1436,10,
		25,0,0,1436,1437,5,82,0,0,1437,1438,3,194,97,0,1438,1439,5,83,0,0,1439,
		1455,1,0,0,0,1440,1441,10,21,0,0,1441,1455,7,12,0,0,1442,1443,10,14,0,
		0,1443,1446,5,26,0,0,1444,1447,3,236,118,0,1445,1447,3,196,98,0,1446,1444,
		1,0,0,0,1446,1445,1,0,0,0,1447,1455,1,0,0,0,1448,1449,10,3,0,0,1449,1451,
		5,122,0,0,1450,1452,3,240,120,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,
		1453,1,0,0,0,1453,1455,3,160,80,0,1454,1373,1,0,0,0,1454,1376,1,0,0,0,
		1454,1379,1,0,0,0,1454,1390,1,0,0,0,1454,1393,1,0,0,0,1454,1396,1,0,0,
		0,1454,1399,1,0,0,0,1454,1402,1,0,0,0,1454,1405,1,0,0,0,1454,1408,1,0,
		0,0,1454,1411,1,0,0,0,1454,1417,1,0,0,0,1454,1420,1,0,0,0,1454,1435,1,
		0,0,0,1454,1440,1,0,0,0,1454,1442,1,0,0,0,1454,1448,1,0,0,0,1455,1458,
		1,0,0,0,1456,1454,1,0,0,0,1456,1457,1,0,0,0,1457,195,1,0,0,0,1458,1456,
		1,0,0,0,1459,1461,3,12,6,0,1460,1459,1,0,0,0,1461,1464,1,0,0,0,1462,1460,
		1,0,0,0,1462,1463,1,0,0,0,1463,1465,1,0,0,0,1464,1462,1,0,0,0,1465,1469,
		3,236,118,0,1466,1468,3,110,55,0,1467,1466,1,0,0,0,1468,1471,1,0,0,0,1469,
		1467,1,0,0,0,1469,1470,1,0,0,0,1470,1472,1,0,0,0,1471,1469,1,0,0,0,1472,
		1473,3,160,80,0,1473,197,1,0,0,0,1474,1475,3,200,100,0,1475,1476,5,121,
		0,0,1476,1477,3,202,101,0,1477,199,1,0,0,0,1478,1501,3,160,80,0,1479,1481,
		5,78,0,0,1480,1482,3,90,45,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,
		1483,1,0,0,0,1483,1501,5,79,0,0,1484,1485,5,78,0,0,1485,1490,3,160,80,
		0,1486,1487,5,85,0,0,1487,1489,3,160,80,0,1488,1486,1,0,0,0,1489,1492,
		1,0,0,0,1490,1488,1,0,0,0,1490,1491,1,0,0,0,1491,1493,1,0,0,0,1492,1490,
		1,0,0,0,1493,1494,5,79,0,0,1494,1501,1,0,0,0,1495,1497,5,78,0,0,1496,1498,
		3,96,48,0,1497,1496,1,0,0,0,1497,1498,1,0,0,0,1498,1499,1,0,0,0,1499,1501,
		5,79,0,0,1500,1478,1,0,0,0,1500,1479,1,0,0,0,1500,1484,1,0,0,0,1500,1495,
		1,0,0,0,1501,201,1,0,0,0,1502,1505,3,194,97,0,1503,1505,3,154,77,0,1504,
		1502,1,0,0,0,1504,1503,1,0,0,0,1505,203,1,0,0,0,1506,1507,5,78,0,0,1507,
		1508,3,194,97,0,1508,1509,5,79,0,0,1509,1525,1,0,0,0,1510,1525,5,43,0,
		0,1511,1525,5,40,0,0,1512,1525,3,102,51,0,1513,1525,3,160,80,0,1514,1515,
		3,44,22,0,1515,1516,5,86,0,0,1516,1517,5,9,0,0,1517,1525,1,0,0,0,1518,
		1522,3,232,116,0,1519,1523,3,244,122,0,1520,1521,5,43,0,0,1521,1523,3,
		246,123,0,1522,1519,1,0,0,0,1522,1520,1,0,0,0,1523,1525,1,0,0,0,1524,1506,
		1,0,0,0,1524,1510,1,0,0,0,1524,1511,1,0,0,0,1524,1512,1,0,0,0,1524,1513,
		1,0,0,0,1524,1514,1,0,0,0,1524,1518,1,0,0,0,1525,205,1,0,0,0,1526,1527,
		5,41,0,0,1527,1528,3,188,94,0,1528,1532,5,80,0,0,1529,1531,3,208,104,0,
		1530,1529,1,0,0,0,1531,1534,1,0,0,0,1532,1530,1,0,0,0,1532,1533,1,0,0,
		0,1533,1535,1,0,0,0,1534,1532,1,0,0,0,1535,1536,5,81,0,0,1536,207,1,0,
		0,0,1537,1541,5,6,0,0,1538,1542,3,190,95,0,1539,1542,5,77,0,0,1540,1542,
		3,210,105,0,1541,1538,1,0,0,0,1541,1539,1,0,0,0,1541,1540,1,0,0,0,1542,
		1543,1,0,0,0,1543,1544,7,13,0,0,1544,1549,3,212,106,0,1545,1546,5,12,0,
		0,1546,1547,7,13,0,0,1547,1549,3,212,106,0,1548,1537,1,0,0,0,1548,1545,
		1,0,0,0,1549,209,1,0,0,0,1550,1551,6,105,-1,0,1551,1552,5,78,0,0,1552,
		1553,3,210,105,0,1553,1554,5,79,0,0,1554,1577,1,0,0,0,1555,1557,3,12,6,
		0,1556,1555,1,0,0,0,1557,1560,1,0,0,0,1558,1556,1,0,0,0,1558,1559,1,0,
		0,0,1559,1561,1,0,0,0,1560,1558,1,0,0,0,1561,1565,3,236,118,0,1562,1564,
		3,110,55,0,1563,1562,1,0,0,0,1564,1567,1,0,0,0,1565,1563,1,0,0,0,1565,
		1566,1,0,0,0,1566,1568,1,0,0,0,1567,1565,1,0,0,0,1568,1573,3,160,80,0,
		1569,1570,5,98,0,0,1570,1572,3,194,97,0,1571,1569,1,0,0,0,1572,1575,1,
		0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,1577,1,0,0,0,1575,1573,
		1,0,0,0,1576,1550,1,0,0,0,1576,1558,1,0,0,0,1577,1583,1,0,0,0,1578,1579,
		10,1,0,0,1579,1580,5,98,0,0,1580,1582,3,194,97,0,1581,1578,1,0,0,0,1582,
		1585,1,0,0,0,1583,1581,1,0,0,0,1583,1584,1,0,0,0,1584,211,1,0,0,0,1585,
		1583,1,0,0,0,1586,1594,3,154,77,0,1587,1589,3,156,78,0,1588,1587,1,0,0,
		0,1589,1592,1,0,0,0,1590,1588,1,0,0,0,1590,1591,1,0,0,0,1591,1594,1,0,
		0,0,1592,1590,1,0,0,0,1593,1586,1,0,0,0,1593,1590,1,0,0,0,1594,213,1,0,
		0,0,1595,1596,3,80,40,0,1596,1597,5,86,0,0,1597,1599,1,0,0,0,1598,1595,
		1,0,0,0,1598,1599,1,0,0,0,1599,1603,1,0,0,0,1600,1602,3,110,55,0,1601,
		1600,1,0,0,0,1602,1605,1,0,0,0,1603,1601,1,0,0,0,1603,1604,1,0,0,0,1604,
		1606,1,0,0,0,1605,1603,1,0,0,0,1606,1608,3,160,80,0,1607,1609,3,240,120,
		0,1608,1607,1,0,0,0,1608,1609,1,0,0,0,1609,215,1,0,0,0,1610,1611,3,232,
		116,0,1611,1612,3,218,109,0,1612,1613,3,224,112,0,1613,1620,1,0,0,0,1614,
		1617,3,218,109,0,1615,1618,3,222,111,0,1616,1618,3,224,112,0,1617,1615,
		1,0,0,0,1617,1616,1,0,0,0,1618,1620,1,0,0,0,1619,1610,1,0,0,0,1619,1614,
		1,0,0,0,1620,217,1,0,0,0,1621,1623,3,160,80,0,1622,1624,3,228,114,0,1623,
		1622,1,0,0,0,1623,1624,1,0,0,0,1624,1632,1,0,0,0,1625,1626,5,86,0,0,1626,
		1628,3,160,80,0,1627,1629,3,228,114,0,1628,1627,1,0,0,0,1628,1629,1,0,
		0,0,1629,1631,1,0,0,0,1630,1625,1,0,0,0,1631,1634,1,0,0,0,1632,1630,1,
		0,0,0,1632,1633,1,0,0,0,1633,1637,1,0,0,0,1634,1632,1,0,0,0,1635,1637,
		3,238,119,0,1636,1621,1,0,0,0,1636,1635,1,0,0,0,1637,219,1,0,0,0,1638,
		1640,3,160,80,0,1639,1641,3,230,115,0,1640,1639,1,0,0,0,1640,1641,1,0,
		0,0,1641,1642,1,0,0,0,1642,1643,3,224,112,0,1643,221,1,0,0,0,1644,1672,
		5,82,0,0,1645,1650,5,83,0,0,1646,1647,5,82,0,0,1647,1649,5,83,0,0,1648,
		1646,1,0,0,0,1649,1652,1,0,0,0,1650,1648,1,0,0,0,1650,1651,1,0,0,0,1651,
		1653,1,0,0,0,1652,1650,1,0,0,0,1653,1673,3,78,39,0,1654,1655,3,194,97,
		0,1655,1662,5,83,0,0,1656,1657,5,82,0,0,1657,1658,3,194,97,0,1658,1659,
		5,83,0,0,1659,1661,1,0,0,0,1660,1656,1,0,0,0,1661,1664,1,0,0,0,1662,1660,
		1,0,0,0,1662,1663,1,0,0,0,1663,1669,1,0,0,0,1664,1662,1,0,0,0,1665,1666,
		5,82,0,0,1666,1668,5,83,0,0,1667,1665,1,0,0,0,1668,1671,1,0,0,0,1669,1667,
		1,0,0,0,1669,1670,1,0,0,0,1670,1673,1,0,0,0,1671,1669,1,0,0,0,1672,1645,
		1,0,0,0,1672,1654,1,0,0,0,1673,223,1,0,0,0,1674,1676,3,246,123,0,1675,
		1677,3,32,16,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,225,1,0,0,0,1678,
		1679,3,232,116,0,1679,1680,3,244,122,0,1680,227,1,0,0,0,1681,1682,5,89,
		0,0,1682,1685,5,88,0,0,1683,1685,3,240,120,0,1684,1681,1,0,0,0,1684,1683,
		1,0,0,0,1685,229,1,0,0,0,1686,1687,5,89,0,0,1687,1690,5,88,0,0,1688,1690,
		3,232,116,0,1689,1686,1,0,0,0,1689,1688,1,0,0,0,1690,231,1,0,0,0,1691,
		1692,5,89,0,0,1692,1693,3,234,117,0,1693,1694,5,88,0,0,1694,233,1,0,0,
		0,1695,1700,3,236,118,0,1696,1697,5,85,0,0,1697,1699,3,236,118,0,1698,
		1696,1,0,0,0,1699,1702,1,0,0,0,1700,1698,1,0,0,0,1700,1701,1,0,0,0,1701,
		235,1,0,0,0,1702,1700,1,0,0,0,1703,1705,3,110,55,0,1704,1703,1,0,0,0,1705,
		1708,1,0,0,0,1706,1704,1,0,0,0,1706,1707,1,0,0,0,1707,1711,1,0,0,0,1708,
		1706,1,0,0,0,1709,1712,3,80,40,0,1710,1712,3,238,119,0,1711,1709,1,0,0,
		0,1711,1710,1,0,0,0,1712,1723,1,0,0,0,1713,1715,3,110,55,0,1714,1713,1,
		0,0,0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,1717,1,0,0,0,1717,1719,
		1,0,0,0,1718,1716,1,0,0,0,1719,1720,5,82,0,0,1720,1722,5,83,0,0,1721,1716,
		1,0,0,0,1722,1725,1,0,0,0,1723,1721,1,0,0,0,1723,1724,1,0,0,0,1724,237,
		1,0,0,0,1725,1723,1,0,0,0,1726,1727,7,14,0,0,1727,239,1,0,0,0,1728,1729,
		5,89,0,0,1729,1734,3,82,41,0,1730,1731,5,85,0,0,1731,1733,3,82,41,0,1732,
		1730,1,0,0,0,1733,1736,1,0,0,0,1734,1732,1,0,0,0,1734,1735,1,0,0,0,1735,
		1737,1,0,0,0,1736,1734,1,0,0,0,1737,1738,5,88,0,0,1738,241,1,0,0,0,1739,
		1749,3,246,123,0,1740,1742,5,86,0,0,1741,1743,3,240,120,0,1742,1741,1,
		0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,0,0,1744,1746,3,160,80,0,1745,1747,
		3,246,123,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1749,1,0,0,0,1748,
		1739,1,0,0,0,1748,1740,1,0,0,0,1749,243,1,0,0,0,1750,1751,5,40,0,0,1751,
		1756,3,242,121,0,1752,1753,3,160,80,0,1753,1754,3,246,123,0,1754,1756,
		1,0,0,0,1755,1750,1,0,0,0,1755,1752,1,0,0,0,1756,245,1,0,0,0,1757,1759,
		5,78,0,0,1758,1760,3,190,95,0,1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,
		1761,1,0,0,0,1761,1762,5,79,0,0,1762,247,1,0,0,0,220,249,254,260,266,271,
		280,285,292,300,303,310,322,326,331,335,339,343,353,361,369,373,380,387,
		391,394,397,406,412,417,420,426,432,436,440,448,457,464,470,474,486,495,
		500,506,510,522,533,538,548,556,566,575,586,591,600,610,615,624,630,637,
		642,650,654,656,662,667,671,678,684,686,693,698,703,706,708,718,728,733,
		736,741,750,757,768,774,785,795,806,815,820,823,830,840,848,851,854,867,
		875,880,888,892,896,900,904,906,910,916,924,934,943,953,961,975,982,987,
		993,1002,1012,1021,1031,1036,1047,1054,1060,1063,1070,1079,1102,1105,1108,
		1116,1120,1128,1134,1145,1154,1159,1172,1178,1185,1198,1207,1216,1222,
		1230,1236,1241,1246,1254,1259,1263,1267,1271,1273,1277,1282,1287,1302,
		1308,1315,1321,1324,1335,1343,1358,1362,1367,1371,1387,1427,1433,1446,
		1451,1454,1456,1462,1469,1481,1490,1497,1500,1504,1522,1524,1532,1541,
		1548,1558,1565,1573,1576,1583,1590,1593,1598,1603,1608,1617,1619,1623,
		1628,1632,1636,1640,1650,1662,1669,1672,1676,1684,1689,1700,1706,1711,
		1716,1723,1734,1742,1746,1748,1755,1759
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
