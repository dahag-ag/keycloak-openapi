{
  "openapi": "3.0.1",
  "info": {
    "title": "Keycloak REST Api",
    "description": "This is a REST API reference for the Keycloak Admin",
    "version": "1"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "RealmsAdmin"
        ],
        "description": "/\nGet accessible realms\n\nReturns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RealmRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RealmsAdmin"
        ],
        "description": "/\nImport a realm\n\nImports a realm from a full representation of that realm.  Realm name must be unique.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RealmRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      }
    },
    "/{realm}": {
      "description": "/{realm}",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nGet the top-level representation of the realm\n\nIt will not include nested information like User and Client representations.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RealmRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nUpdate the top-level information of the realm\n\nAny user, roles or client information in the representation\nwill be ignored.  This will only update top-level attributes of the realm.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RealmRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nDelete the realm\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/admin-events": {
      "description": "/{realm}/admin-events",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "parameters": [
          {
            "name": "operationTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "authRealm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authClient",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authUser",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authIpAddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourcePath",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resourceTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminEventRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nDelete all admin events\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/attack-detection/brute-force/users": {
      "description": "/{realm}/attack-detection/brute-force/users",
      "delete": {
        "tags": [
          "AttackDetection"
        ],
        "description": "/\nClear any user login failures for all users\n\nThis can release temporary disabled users\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/attack-detection/brute-force/users/{userId}": {
      "description": "/{realm}/attack-detection/brute-force/users/{userId}",
      "get": {
        "tags": [
          "AttackDetection"
        ],
        "description": "/\nGet status of a username in brute force detection\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AttackDetection"
        ],
        "description": "/\nClear any user login failures for the user\n\nThis can release temporary disabled user\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "userId",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/authenticator-providers": {
      "description": "/{realm}/authentication/authenticator-providers",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet authenticator providers\n\nReturns a stream of authenticator providers.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/client-authenticator-providers": {
      "description": "/{realm}/authentication/client-authenticator-providers",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet client authenticator providers\n\nReturns a stream of client authenticator providers.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/config": {
      "description": "/{realm}/authentication/config",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nCreate new authenticator configuration\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/config-description/{providerId}": {
      "description": "/{realm}/authentication/config-description/{providerId}",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet authenticator provider's configuration description\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatorConfigInfoRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "providerId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/config/{id}": {
      "description": "/{realm}/authentication/config/{id}",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet authenticator configuration\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nDelete authenticator configuration\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nUpdate authenticator configuration\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "Configuration id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/executions": {
      "description": "/{realm}/authentication/executions",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nAdd new authentication execution\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationExecutionRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/executions/{executionId}": {
      "description": "/{realm}/authentication/executions/{executionId}",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet Single Execution\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nDelete execution\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "executionId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/executions/{executionId}/config": {
      "description": "/{realm}/authentication/executions/{executionId}/config",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nUpdate execution with new configuration\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "executionId",
          "in": "path",
          "description": "Execution id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/executions/{executionId}/config/{id}": {
      "description": "/{realm}/authentication/executions/{executionId}/config/{id}",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet execution's configuration\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "executionId",
          "in": "path",
          "description": "Execution id",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "Configuration id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/executions/{executionId}/lower-priority": {
      "description": "/{realm}/authentication/executions/{executionId}/lower-priority",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nLower execution's priority\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "executionId",
          "in": "path",
          "description": "Execution id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/executions/{executionId}/raise-priority": {
      "description": "/{realm}/authentication/executions/{executionId}/raise-priority",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nRaise execution's priority\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "executionId",
          "in": "path",
          "description": "Execution id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/flows": {
      "description": "/{realm}/authentication/flows",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet authentication flows\n\nReturns a stream of authentication flows.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nCreate a new authentication flow\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/flows/{flowAlias}/copy": {
      "description": "/{realm}/authentication/flows/{flowAlias}/copy",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nCopy existing authentication flow under a new name\n\nThe new name is given as 'newName' attribute of the passed JSON object\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "flowAlias",
          "in": "path",
          "description": "Name of the existing authentication flow",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/flows/{flowAlias}/executions": {
      "description": "/{realm}/authentication/flows/{flowAlias}/executions",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet authentication executions for a flow\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nUpdate authentication executions of a Flow\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationExecutionInfoRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "flowAlias",
          "in": "path",
          "description": "Flow alias",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/flows/{flowAlias}/executions/execution": {
      "description": "/{realm}/authentication/flows/{flowAlias}/executions/execution",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nAdd new authentication execution to a flow\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "flowAlias",
          "in": "path",
          "description": "Alias of parent flow",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/flows/{flowAlias}/executions/flow": {
      "description": "/{realm}/authentication/flows/{flowAlias}/executions/flow",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nAdd new flow with new execution to existing flow\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "flowAlias",
          "in": "path",
          "description": "Alias of parent authentication flow",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/flows/{id}": {
      "description": "/{realm}/authentication/flows/{id}",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet authentication flow for id\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nUpdate an authentication flow\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nDelete an authentication flow\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "Flow id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/form-action-providers": {
      "description": "/{realm}/authentication/form-action-providers",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet form action providers\n\nReturns a stream of form action providers.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/form-providers": {
      "description": "/{realm}/authentication/form-providers",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet form providers\n\nReturns a stream of form providers.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/per-client-config-description": {
      "description": "/{realm}/authentication/per-client-config-description",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet configuration descriptions for all clients\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConfigPropertyRepresentation"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/register-required-action": {
      "description": "/{realm}/authentication/register-required-action",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nRegister a new required actions\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/required-actions": {
      "description": "/{realm}/authentication/required-actions",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet required actions\n\nReturns a stream of required actions.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequiredActionProviderRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/required-actions/{alias}": {
      "description": "/{realm}/authentication/required-actions/{alias}",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet required action for alias\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequiredActionProviderRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nUpdate required action\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequiredActionProviderRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nDelete required action\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "alias",
          "in": "path",
          "description": "Alias of required action",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/required-actions/{alias}/lower-priority": {
      "description": "/{realm}/authentication/required-actions/{alias}/lower-priority",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nLower required action's priority\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "alias",
          "in": "path",
          "description": "Alias of required action",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/required-actions/{alias}/raise-priority": {
      "description": "/{realm}/authentication/required-actions/{alias}/raise-priority",
      "post": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nRaise required action's priority\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "alias",
          "in": "path",
          "description": "Alias of required action",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/authentication/unregistered-required-actions": {
      "description": "/{realm}/authentication/unregistered-required-actions",
      "get": {
        "tags": [
          "AuthenticationManagement"
        ],
        "description": "/\nGet unregistered required actions\n\nReturns a stream of unregistered required actions.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clear-keys-cache": {
      "description": "/{realm}/clear-keys-cache",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nClear cache of external public keys (Public keys of clients or Identity providers)\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clear-realm-cache": {
      "description": "/{realm}/clear-realm-cache",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nClear realm cache\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clear-user-cache": {
      "description": "/{realm}/clear-user-cache",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nClear user cache\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-description-converter": {
      "description": "/{realm}/client-description-converter",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for importing clients under this realm.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-policies/policies": {
      "description": "/{realm}/client-policies/policies",
      "get": {
        "tags": [
          "ClientPolicies"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPoliciesRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ClientPolicies"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientPoliciesRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-policies/profiles": {
      "description": "/{realm}/client-policies/profiles",
      "get": {
        "tags": [
          "ClientProfiles"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "parameters": [
          {
            "name": "include-global-profiles",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientProfilesRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ClientProfiles"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientProfilesRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-registration-policy/providers": {
      "description": "/{realm}/client-registration-policy/providers",
      "get": {
        "tags": [
          "ClientRegistrationPolicy"
        ],
        "description": "/\nBase path for retrieve providers with the configProperties properly filled\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentTypeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes": {
      "description": "/{realm}/client-scopes",
      "get": {
        "tags": [
          "ClientScopes"
        ],
        "description": "/\nGet client scopes belonging to the realm\n\nReturns a list of client scopes belonging to the realm\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ClientScopes"
        ],
        "description": "/\nCreate a new client scope\n\nClient Scope's name must be unique!\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientScopeRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}": {
      "description": "/{realm}/client-scopes/{id}",
      "put": {
        "tags": [
          "ClientScope"
        ],
        "description": "/\nUpdate the client scope\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientScopeRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "ClientScope"
        ],
        "description": "/\nGet representation of the client scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientScopeRepresentation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ClientScope"
        ],
        "description": "/\nDelete the client scope\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/protocol-mappers/add-models": {
      "description": "/{realm}/client-scopes/{id}/protocol-mappers/add-models",
      "post": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nCreate multiple mappers\n\n/\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/protocol-mappers/models": {
      "description": "/{realm}/client-scopes/{id}/protocol-mappers/models",
      "post": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nCreate a mapper\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nGet mappers\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}": {
      "description": "/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}",
      "get": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nGet mappers by name for a specific protocol\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "protocol",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings": {
      "description": "/{realm}/client-scopes/{id}/scope-mappings",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet all scope mappings for the client\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingsRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}": {
      "description": "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}",
      "get": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nGet the roles associated with a client's scope\n\nReturns roles for the client.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nAdd client-level roles to the client's scope\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nRemove client-level roles from the client's scope.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available": {
      "description": "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available",
      "get": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nThe available client-level roles\n\nReturns the roles for the client that can be associated with the client's scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite": {
      "description": "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite",
      "get": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nGet effective client roles\n\nReturns the roles for the client that are associated with the client's scope.\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/realm": {
      "description": "/{realm}/client-scopes/{id}/scope-mappings/realm",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet realm-level roles associated with the client's scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nAdd a set of realm-level roles to the client's scope\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nRemove a set of realm-level roles from the client's scope\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/realm/available": {
      "description": "/{realm}/client-scopes/{id}/scope-mappings/realm/available",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet realm-level roles that are available to attach to this client's scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id}/scope-mappings/realm/composite": {
      "description": "/{realm}/client-scopes/{id}/scope-mappings/realm/composite",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet effective realm-level roles associated with the client's scope\n\nWhat this does is recurse\nany composite roles associated with the client's scope and adds the roles to this lists.  The method is really\nto show a comprehensive total view of realm-level roles associated with the client.\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}": {
      "description": "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}",
      "get": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nGet mapper by id\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nUpdate the mapper\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nDelete the mapper\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id1",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id2",
          "in": "path",
          "description": "Mapper id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-session-stats": {
      "description": "/{realm}/client-session-stats",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nGet client session stats\n\nReturns a JSON map.  The key is the client id, the value is the number of sessions that currently are active\nwith that client.  Only clients that actually have a session associated with them will be in this map.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates": {
      "description": "/{realm}/client-templates",
      "get": {
        "tags": [
          "ClientScopes"
        ],
        "description": "/\nGet client scopes belonging to the realm\n\nReturns a list of client scopes belonging to the realm\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ClientScopes"
        ],
        "description": "/\nCreate a new client scope\n\nClient Scope's name must be unique!\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientScopeRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}": {
      "description": "/{realm}/client-templates/{id}",
      "put": {
        "tags": [
          "ClientScope"
        ],
        "description": "/\nUpdate the client scope\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientScopeRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "ClientScope"
        ],
        "description": "/\nGet representation of the client scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientScopeRepresentation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ClientScope"
        ],
        "description": "/\nDelete the client scope\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/protocol-mappers/add-models": {
      "description": "/{realm}/client-templates/{id}/protocol-mappers/add-models",
      "post": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nCreate multiple mappers\n\n/\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/protocol-mappers/models": {
      "description": "/{realm}/client-templates/{id}/protocol-mappers/models",
      "post": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nCreate a mapper\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nGet mappers\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/protocol-mappers/protocol/{protocol}": {
      "description": "/{realm}/client-templates/{id}/protocol-mappers/protocol/{protocol}",
      "get": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nGet mappers by name for a specific protocol\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "protocol",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/scope-mappings": {
      "description": "/{realm}/client-templates/{id}/scope-mappings",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet all scope mappings for the client\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingsRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/scope-mappings/clients/{client}": {
      "description": "/{realm}/client-templates/{id}/scope-mappings/clients/{client}",
      "get": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nGet the roles associated with a client's scope\n\nReturns roles for the client.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nAdd client-level roles to the client's scope\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nRemove client-level roles from the client's scope.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/scope-mappings/clients/{client}/available": {
      "description": "/{realm}/client-templates/{id}/scope-mappings/clients/{client}/available",
      "get": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nThe available client-level roles\n\nReturns the roles for the client that can be associated with the client's scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/scope-mappings/clients/{client}/composite": {
      "description": "/{realm}/client-templates/{id}/scope-mappings/clients/{client}/composite",
      "get": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nGet effective client roles\n\nReturns the roles for the client that are associated with the client's scope.\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/scope-mappings/realm": {
      "description": "/{realm}/client-templates/{id}/scope-mappings/realm",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet realm-level roles associated with the client's scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nAdd a set of realm-level roles to the client's scope\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nRemove a set of realm-level roles from the client's scope\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/scope-mappings/realm/available": {
      "description": "/{realm}/client-templates/{id}/scope-mappings/realm/available",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet realm-level roles that are available to attach to this client's scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id}/scope-mappings/realm/composite": {
      "description": "/{realm}/client-templates/{id}/scope-mappings/realm/composite",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet effective realm-level roles associated with the client's scope\n\nWhat this does is recurse\nany composite roles associated with the client's scope and adds the roles to this lists.  The method is really\nto show a comprehensive total view of realm-level roles associated with the client.\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/client-templates/{id1}/protocol-mappers/models/{id2}": {
      "description": "/{realm}/client-templates/{id1}/protocol-mappers/models/{id2}",
      "get": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nGet mapper by id\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nUpdate the mapper\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nDelete the mapper\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id1",
          "in": "path",
          "description": "id of client scope (not name)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id2",
          "in": "path",
          "description": "Mapper id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients": {
      "description": "/{realm}/clients",
      "get": {
        "tags": [
          "Clients"
        ],
        "description": "/\nBase path for managing clients under this realm.\n\n",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewableOnly",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clients"
        ],
        "description": "/\nCreate a new client\n\nClient's client_id must be unique!\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients-initial-access": {
      "description": "/{realm}/clients-initial-access",
      "post": {
        "tags": [
          "ClientInitialAccess"
        ],
        "description": "/\nCreate a new initial access token.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientInitialAccessCreatePresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInitialAccessPresentation"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ClientInitialAccess"
        ],
        "description": "/\nBase path for managing client initial access tokens\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientInitialAccessPresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients-initial-access/{id}": {
      "description": "/{realm}/clients-initial-access/{id}",
      "delete": {
        "tags": [
          "ClientInitialAccess"
        ],
        "description": "/\nBase path for managing client initial access tokens\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}": {
      "description": "/{realm}/clients/{id}",
      "put": {
        "tags": [
          "Client"
        ],
        "description": "/\nUpdate the client\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nGet representation of the client\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRepresentation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Client"
        ],
        "description": "/\nDelete the client\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}": {
      "description": "/{realm}/clients/{id}/certificates/{attr}",
      "get": {
        "tags": [
          "ClientAttributeCertificate"
        ],
        "description": "/\nGet key info\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "attr",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/download": {
      "description": "/{realm}/clients/{id}/certificates/{attr}/download",
      "post": {
        "tags": [
          "ClientAttributeCertificate"
        ],
        "description": "/\nGet a keystore file for the client, containing private key and public certificate\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyStoreConfig"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "attr",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/generate": {
      "description": "/{realm}/clients/{id}/certificates/{attr}/generate",
      "post": {
        "tags": [
          "ClientAttributeCertificate"
        ],
        "description": "/\nGenerate a new certificate with new key pair\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "attr",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/generate-and-download": {
      "description": "/{realm}/clients/{id}/certificates/{attr}/generate-and-download",
      "post": {
        "tags": [
          "ClientAttributeCertificate"
        ],
        "description": "/\nGenerate a new keypair and certificate, and get the private key file\n\nGenerates a keypair and certificate and serves the private key in a specified keystore format.\nOnly generated public certificate is saved in Keycloak DB - the private key is not.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyStoreConfig"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "attr",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/upload": {
      "description": "/{realm}/clients/{id}/certificates/{attr}/upload",
      "post": {
        "tags": [
          "ClientAttributeCertificate"
        ],
        "description": "/\nUpload certificate and eventually private key\n\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "attr",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/certificates/{attr}/upload-certificate": {
      "description": "/{realm}/clients/{id}/certificates/{attr}/upload-certificate",
      "post": {
        "tags": [
          "ClientAttributeCertificate"
        ],
        "description": "/\nUpload only certificate, not private key\n\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "attr",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/client-secret": {
      "description": "/{realm}/clients/{id}/client-secret",
      "post": {
        "tags": [
          "Client"
        ],
        "description": "/\nGenerate a new secret for the client\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialRepresentation"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nGet the client secret\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/default-client-scopes": {
      "description": "/{realm}/clients/{id}/default-client-scopes",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nGet default client scopes.  Only name and ids are returned.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/default-client-scopes/{clientScopeId}": {
      "description": "/{realm}/clients/{id}/default-client-scopes/{clientScopeId}",
      "put": {
        "tags": [
          "Client"
        ],
        "description": "/\nBase path for managing clients under this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Client"
        ],
        "description": "/\nBase path for managing clients under this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "clientScopeId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token": {
      "description": "/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token",
      "get": {
        "tags": [
          "ClientScopeEvaluate"
        ],
        "description": "/\nCreate JSON with payload of example access token\n\n",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/generate-example-id-token": {
      "description": "/{realm}/clients/{id}/evaluate-scopes/generate-example-id-token",
      "get": {
        "tags": [
          "ClientScopeEvaluate"
        ],
        "description": "/\nCreate JSON with payload of example id token\n\n",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IDToken"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo": {
      "description": "/{realm}/clients/{id}/evaluate-scopes/generate-example-userinfo",
      "get": {
        "tags": [
          "ClientScopeEvaluate"
        ],
        "description": "/\nCreate JSON with payload of example user info\n\n",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/protocol-mappers": {
      "description": "/{realm}/clients/{id}/evaluate-scopes/protocol-mappers",
      "get": {
        "tags": [
          "ClientScopeEvaluate"
        ],
        "description": "/\nReturn list of all protocol mappers, which will be used when generating tokens issued for particular client. This means\nprotocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.\n\n",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperEvaluationRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted": {
      "description": "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted",
      "get": {
        "tags": [
          "ClientScopeEvaluateScopeMappings"
        ],
        "description": "/\nGet effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.\n\nThis contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes,\nwhich are linked with this client.\n\n",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "roleContainerId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted": {
      "description": "/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted",
      "get": {
        "tags": [
          "ClientScopeEvaluateScopeMappings"
        ],
        "description": "/\nGet roles, which this client doesn't have scope for and can't have them in the accessToken issued for him. Defacto all the\nother roles of particular role container, which are not in {",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "roleContainerId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/installation/providers/{providerId}": {
      "description": "/{realm}/clients/{id}/installation/providers/{providerId}",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nBase path for managing clients under this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "providerId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/management/permissions": {
      "description": "/{realm}/clients/{id}/management/permissions",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Client"
        ],
        "description": "/\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\n\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/nodes": {
      "description": "/{realm}/clients/{id}/nodes",
      "post": {
        "tags": [
          "Client"
        ],
        "description": "/\nRegister a cluster node with the client\n\nManually register cluster node to this client - usually it's not needed to call this directly as adapter should handle\nby sending registration request to Keycloak\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/nodes/{node}": {
      "description": "/{realm}/clients/{id}/nodes/{node}",
      "delete": {
        "tags": [
          "Client"
        ],
        "description": "/\nUnregister a cluster node from the client\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "node",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/offline-session-count": {
      "description": "/{realm}/clients/{id}/offline-session-count",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nGet application offline session count\n\nReturns a number of offline user sessions associated with this client\n\n{\n\"count\": number\n}\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/offline-sessions": {
      "description": "/{realm}/clients/{id}/offline-sessions",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nGet offline sessions for client\n\nReturns a list of offline user sessions associated with this client\n\n",
        "parameters": [
          {
            "name": "first",
            "in": "query",
            "description": "Paging offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Maximum results size (defaults to 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/optional-client-scopes": {
      "description": "/{realm}/clients/{id}/optional-client-scopes",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nGet optional client scopes.  Only name and ids are returned.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}": {
      "description": "/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}",
      "put": {
        "tags": [
          "Client"
        ],
        "description": "/\nBase path for managing clients under this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Client"
        ],
        "description": "/\nBase path for managing clients under this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "clientScopeId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/protocol-mappers/add-models": {
      "description": "/{realm}/clients/{id}/protocol-mappers/add-models",
      "post": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nCreate multiple mappers\n\n/\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/protocol-mappers/models": {
      "description": "/{realm}/clients/{id}/protocol-mappers/models",
      "post": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nCreate a mapper\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nGet mappers\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}": {
      "description": "/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}",
      "get": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nGet mappers by name for a specific protocol\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "protocol",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/push-revocation": {
      "description": "/{realm}/clients/{id}/push-revocation",
      "post": {
        "tags": [
          "Client"
        ],
        "description": "/\nPush the client's revocation policy to its admin URL\n\nIf the client has an admin URL, push revocation policy to it.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "GlobalRequestResult"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/registration-access-token": {
      "description": "/{realm}/clients/{id}/registration-access-token",
      "post": {
        "tags": [
          "Client"
        ],
        "description": "/\nGenerate a new registration access token for the client\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/roles": {
      "description": "/{realm}/clients/{id}/roles",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet all roles for the realm or client\n\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "briefRepresentation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nCreate a new role for the realm or client\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}": {
      "description": "/{realm}/clients/{id}/roles/{role-name}",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet a role by name\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nDelete a role by name\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nUpdate a role by name\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "role's name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/composites": {
      "description": "/{realm}/clients/{id}/roles/{role-name}/composites",
      "post": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nAdd a composite to the role\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet composites of the role\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nRemove roles from the role's composite\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "role's name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}": {
      "description": "/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet client-level roles for the client that are in the role's composite\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "role's name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "clientUuid",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/composites/realm": {
      "description": "/{realm}/clients/{id}/roles/{role-name}/composites/realm",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet realm-level roles of the role's composite\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "role's name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/groups": {
      "description": "/{realm}/clients/{id}/roles/{role-name}/groups",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nBase path for managing clients under this realm.\n\n",
        "parameters": [
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "briefRepresentation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/management/permissions": {
      "description": "/{realm}/clients/{id}/roles/{role-name}/management/permissions",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\n\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\n\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/roles/{role-name}/users": {
      "description": "/{realm}/clients/{id}/roles/{role-name}/users",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nReturns a stream of users that have the specified role name.\n\n\n",
        "parameters": [
          {
            "name": "first",
            "in": "query",
            "description": "first result to return. Ignored if negative or {@code null}.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "maximum number of results to return. Ignored if negative or {@code null}.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "the role name.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings": {
      "description": "/{realm}/clients/{id}/scope-mappings",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet all scope mappings for the client\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingsRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/clients/{client}": {
      "description": "/{realm}/clients/{id}/scope-mappings/clients/{client}",
      "get": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nGet the roles associated with a client's scope\n\nReturns roles for the client.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nAdd client-level roles to the client's scope\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nRemove client-level roles from the client's scope.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/clients/{client}/available": {
      "description": "/{realm}/clients/{id}/scope-mappings/clients/{client}/available",
      "get": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nThe available client-level roles\n\nReturns the roles for the client that can be associated with the client's scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/clients/{client}/composite": {
      "description": "/{realm}/clients/{id}/scope-mappings/clients/{client}/composite",
      "get": {
        "tags": [
          "ScopeMappedClient"
        ],
        "description": "/\nGet effective client roles\n\nReturns the roles for the client that are associated with the client's scope.\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/realm": {
      "description": "/{realm}/clients/{id}/scope-mappings/realm",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet realm-level roles associated with the client's scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nAdd a set of realm-level roles to the client's scope\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nRemove a set of realm-level roles from the client's scope\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/realm/available": {
      "description": "/{realm}/clients/{id}/scope-mappings/realm/available",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet realm-level roles that are available to attach to this client's scope\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/scope-mappings/realm/composite": {
      "description": "/{realm}/clients/{id}/scope-mappings/realm/composite",
      "get": {
        "tags": [
          "ScopeMapped"
        ],
        "description": "/\nGet effective realm-level roles associated with the client's scope\n\nWhat this does is recurse\nany composite roles associated with the client's scope and adds the roles to this lists.  The method is really\nto show a comprehensive total view of realm-level roles associated with the client.\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/service-account-user": {
      "description": "/{realm}/clients/{id}/service-account-user",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nGet a user dedicated to the service account\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/session-count": {
      "description": "/{realm}/clients/{id}/session-count",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nGet application session count\n\nReturns a number of user sessions associated with this client\n\n{\n\"count\": number\n}\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/test-nodes-available": {
      "description": "/{realm}/clients/{id}/test-nodes-available",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nTest if registered cluster nodes are available\n\nTests availability by sending 'ping' request to all cluster nodes.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "GlobalRequestResult"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id}/user-sessions": {
      "description": "/{realm}/clients/{id}/user-sessions",
      "get": {
        "tags": [
          "Client"
        ],
        "description": "/\nGet user sessions for client\n\nReturns a list of user sessions associated with this client\n\n",
        "parameters": [
          {
            "name": "first",
            "in": "query",
            "description": "Paging offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Maximum results size (defaults to 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/clients/{id1}/protocol-mappers/models/{id2}": {
      "description": "/{realm}/clients/{id1}/protocol-mappers/models/{id2}",
      "get": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nGet mapper by id\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolMapperRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nUpdate the mapper\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolMapperRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ProtocolMappers"
        ],
        "description": "/\nDelete the mapper\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id1",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id2",
          "in": "path",
          "description": "Mapper id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/components": {
      "description": "/{realm}/components",
      "get": {
        "tags": [
          "Component"
        ],
        "description": "/\nBase path for managing components under this realm.\n\n",
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Component"
        ],
        "description": "/\nBase path for managing components under this realm.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/components/{id}": {
      "description": "/{realm}/components/{id}",
      "get": {
        "tags": [
          "Component"
        ],
        "description": "/\nBase path for managing components under this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Component"
        ],
        "description": "/\nBase path for managing components under this realm.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Component"
        ],
        "description": "/\nBase path for managing components under this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/components/{id}/sub-component-types": {
      "description": "/{realm}/components/{id}/sub-component-types",
      "get": {
        "tags": [
          "Component"
        ],
        "description": "/\nList of subcomponent types that are available to configure for a particular parent component.\n\n",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentTypeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/credential-registrators": {
      "description": "/{realm}/credential-registrators",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/default-default-client-scopes": {
      "description": "/{realm}/default-default-client-scopes",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nGet realm default client scopes.  Only name and ids are returned.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/default-default-client-scopes/{clientScopeId}": {
      "description": "/{realm}/default-default-client-scopes/{clientScopeId}",
      "put": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "clientScopeId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/default-groups": {
      "description": "/{realm}/default-groups",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nGet group hierarchy.  Only name and ids are returned.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/default-groups/{groupId}": {
      "description": "/{realm}/default-groups/{groupId}",
      "put": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "groupId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/default-optional-client-scopes": {
      "description": "/{realm}/default-optional-client-scopes",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nGet realm optional client scopes.  Only name and ids are returned.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientScopeRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/default-optional-client-scopes/{clientScopeId}": {
      "description": "/{realm}/default-optional-client-scopes/{clientScopeId}",
      "put": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "clientScopeId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/events": {
      "description": "/{realm}/events",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ipAddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nDelete all events\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/events/config": {
      "description": "/{realm}/events/config",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nGet the events provider configuration\n\nReturns JSON object with events provider configuration\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RealmEventsConfigRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nUpdate the events provider\n\nChange the events provider and/or its configuration\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RealmEventsConfigRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/group-by-path/{path}": {
      "description": "/{realm}/group-by-path/{path}",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "path",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups": {
      "description": "/{realm}/groups",
      "get": {
        "tags": [
          "Groups"
        ],
        "description": "/\nGet group hierarchy.  Only name and ids are returned.\n\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "briefRepresentation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "/\ncreate or add a top level realm groupSet or create child.  This will update the group and set the parent if it exists.  Create it and set the parent\nif the group doesn't exist.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}": {
      "description": "/{realm}/groups/{id}",
      "get": {
        "tags": [
          "Group"
        ],
        "description": "/\n\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "description": "/\nUpdate group, ignores subgroups.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/children": {
      "description": "/{realm}/groups/{id}/children",
      "post": {
        "tags": [
          "Group"
        ],
        "description": "/\nSet or create child.  This will just set the parent if it exists.  Create it and set the parent\nif the group doesn't exist.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/management/permissions": {
      "description": "/{realm}/groups/{id}/management/permissions",
      "get": {
        "tags": [
          "Group"
        ],
        "description": "/\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "description": "/\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\n\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/members": {
      "description": "/{realm}/groups/{id}/members",
      "get": {
        "tags": [
          "Group"
        ],
        "description": "/\nGet users\n\nReturns a stream of users, filtered according to query parameters\n\n",
        "parameters": [
          {
            "name": "first",
            "in": "query",
            "description": "Pagination offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Maximum results size (defaults to 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "Only return basic information (only guaranteed to return id, username, created, first and last name,",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings": {
      "description": "/{realm}/groups/{id}/role-mappings",
      "get": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nGet role mappings\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingsRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/clients/{client}": {
      "description": "/{realm}/groups/{id}/role-mappings/clients/{client}",
      "get": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nGet client-level role mappings for the user, and the app\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nAdd client-level roles to the user role mapping\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nDelete client-level roles from user role mapping\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/clients/{client}/available": {
      "description": "/{realm}/groups/{id}/role-mappings/clients/{client}/available",
      "get": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nGet available client-level roles that can be mapped to the user\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/clients/{client}/composite": {
      "description": "/{realm}/groups/{id}/role-mappings/clients/{client}/composite",
      "get": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nGet effective client-level role mappings\n\nThis recurses any composite roles\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/realm": {
      "description": "/{realm}/groups/{id}/role-mappings/realm",
      "get": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nGet realm-level role mappings\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nAdd realm-level role mappings to the user\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nDelete realm-level role mappings\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/realm/available": {
      "description": "/{realm}/groups/{id}/role-mappings/realm/available",
      "get": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nGet realm-level roles that can be mapped\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/{id}/role-mappings/realm/composite": {
      "description": "/{realm}/groups/{id}/role-mappings/realm/composite",
      "get": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nGet effective realm-level role mappings\n\nThis will recurse all composite roles to get the result.\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/groups/count": {
      "description": "/{realm}/groups/count",
      "get": {
        "tags": [
          "Groups"
        ],
        "description": "/\nReturns the groups counts.\n\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "top",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/identity-provider/import-config": {
      "description": "/{realm}/identity-provider/import-config",
      "post": {
        "tags": [
          "IdentityProviders"
        ],
        "description": "/\nImport identity provider from uploaded JSON file\n\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object"
              }
            },
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/identity-provider/instances": {
      "description": "/{realm}/identity-provider/instances",
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "description": "/\nGet identity providers\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "IdentityProviders"
        ],
        "description": "/\nCreate a new identity provider\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}": {
      "description": "/{realm}/identity-provider/instances/{alias}",
      "get": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nGet the identity provider\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderRepresentation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nDelete the identity provider\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nUpdate the identity provider\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "alias",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/export": {
      "description": "/{realm}/identity-provider/instances/{alias}/export",
      "get": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nExport public broker configuration for identity provider\n\n",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Format to use",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "alias",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/management/permissions": {
      "description": "/{realm}/identity-provider/instances/{alias}/management/permissions",
      "get": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nReturn object stating whether client Authorization permissions have been initialized or not and a reference\n\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "alias",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/mapper-types": {
      "description": "/{realm}/identity-provider/instances/{alias}/mapper-types",
      "get": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nGet mapper types for identity provider\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "alias",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/mappers": {
      "description": "/{realm}/identity-provider/instances/{alias}/mappers",
      "get": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nGet mappers for identity provider\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nAdd a mapper to identity provider\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "alias",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/identity-provider/instances/{alias}/mappers/{id}": {
      "description": "/{realm}/identity-provider/instances/{alias}/mappers/{id}",
      "get": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nGet mapper by id for the identity provider\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nUpdate a mapper for the identity provider\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "IdentityProvider"
        ],
        "description": "/\nDelete a mapper for the identity provider\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "alias",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/identity-provider/providers/{provider_id}": {
      "description": "/{realm}/identity-provider/providers/{provider_id}",
      "get": {
        "tags": [
          "IdentityProviders"
        ],
        "description": "/\nGet identity providers\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "provider_id",
          "in": "path",
          "description": "Provider id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/keys": {
      "description": "/{realm}/keys",
      "get": {
        "tags": [
          "Key"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeysMetadataRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/ldap-server-capabilities": {
      "description": "/{realm}/ldap-server-capabilities",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nGet LDAP supported extensions.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestLdapConnectionRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/localization": {
      "description": "/{realm}/localization",
      "get": {
        "tags": [
          "RealmLocalization"
        ],
        "description": "/\nBase path for managing localization under this realm.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/localization/{locale}": {
      "description": "/{realm}/localization/{locale}",
      "post": {
        "tags": [
          "RealmLocalization"
        ],
        "description": "/\nImport localization from uploaded JSON file\n/\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object"
              }
            },
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RealmLocalization"
        ],
        "description": "/\nBase path for managing localization under this realm.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "RealmLocalization"
        ],
        "description": "/\nBase path for managing localization under this realm.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "locale",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/localization/{locale}/{key}": {
      "description": "/{realm}/localization/{locale}/{key}",
      "put": {
        "tags": [
          "RealmLocalization"
        ],
        "description": "/\nBase path for managing localization under this realm.\n/\n",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RealmLocalization"
        ],
        "description": "/\nBase path for managing localization under this realm.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "RealmLocalization"
        ],
        "description": "/\nBase path for managing localization under this realm.\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "locale",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "key",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/logout-all": {
      "description": "/{realm}/logout-all",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nRemoves all user sessions.  Any client that has an admin url will also be told to invalidate any sessions\nthey have.\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "GlobalRequestResult"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/partial-export": {
      "description": "/{realm}/partial-export",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nPartial export of existing realm into a JSON file.\n\n",
        "parameters": [
          {
            "name": "exportGroupsAndRoles",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exportClients",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RealmRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/partialImport": {
      "description": "/{realm}/partialImport",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nPartial import from a JSON file to an existing realm.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialImportRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/push-revocation": {
      "description": "/{realm}/push-revocation",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nPush the realm's revocation policy to any client that has an admin url associated with it.\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles": {
      "description": "/{realm}/roles",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet all roles for the realm or client\n\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "briefRepresentation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nCreate a new role for the realm or client\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}": {
      "description": "/{realm}/roles-by-id/{role-id}",
      "get": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nGet a specific role's representation\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nDelete the role\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nUpdate the role\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-id",
          "in": "path",
          "description": "id of role",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}/composites": {
      "description": "/{realm}/roles-by-id/{role-id}/composites",
      "post": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nMake the role a composite role by associating some child roles\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nPath for managing all realm-level or client-level roles defined in this realm by its id.\n\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nRemove a set of roles from the role's composite\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}": {
      "description": "/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}",
      "get": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nGet client-level roles for the client that are in the role's composite\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "clientUuid",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}/composites/realm": {
      "description": "/{realm}/roles-by-id/{role-id}/composites/realm",
      "get": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nGet realm-level roles that are in the role's composite\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles-by-id/{role-id}/management/permissions": {
      "description": "/{realm}/roles-by-id/{role-id}/management/permissions",
      "get": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nReturn object stating whether role Authoirzation permissions have been initialized or not and a reference\n\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RoleById"
        ],
        "description": "/\nReturn object stating whether role Authoirzation permissions have been initialized or not and a reference\n\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles/{role-name}": {
      "description": "/{realm}/roles/{role-name}",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet a role by name\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nDelete a role by name\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nUpdate a role by name\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "role's name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles/{role-name}/composites": {
      "description": "/{realm}/roles/{role-name}/composites",
      "post": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nAdd a composite to the role\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet composites of the role\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nRemove roles from the role's composite\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "role's name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles/{role-name}/composites/clients/{clientUuid}": {
      "description": "/{realm}/roles/{role-name}/composites/clients/{clientUuid}",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet client-level roles for the client that are in the role's composite\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "role's name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "clientUuid",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles/{role-name}/composites/realm": {
      "description": "/{realm}/roles/{role-name}/composites/realm",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nGet realm-level roles of the role's composite\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "role's name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles/{role-name}/groups": {
      "description": "/{realm}/roles/{role-name}/groups",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nbase path for managing realm-level roles of this realm\n\n",
        "parameters": [
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "briefRepresentation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles/{role-name}/management/permissions": {
      "description": "/{realm}/roles/{role-name}/management/permissions",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\n\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nReturn object stating whether role Authorization permissions have been initialized or not and a reference\n\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/roles/{role-name}/users": {
      "description": "/{realm}/roles/{role-name}/users",
      "get": {
        "tags": [
          "RoleContainer"
        ],
        "description": "/\nReturns a stream of users that have the specified role name.\n\n\n",
        "parameters": [
          {
            "name": "first",
            "in": "query",
            "description": "first result to return. Ignored if negative or {@code null}.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "maximum number of results to return. Ignored if negative or {@code null}.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role-name",
          "in": "path",
          "description": "the role name.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/sessions/{session}": {
      "description": "/{realm}/sessions/{session}",
      "delete": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nRemove a specific user session. Any client that has an admin url will also be told to invalidate this\nparticular session.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "session",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/testLDAPConnection": {
      "description": "/{realm}/testLDAPConnection",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/testSMTPConnection": {
      "description": "/{realm}/testSMTPConnection",
      "post": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nTest SMTP connection with current logged in user\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/user-storage/{id}/name": {
      "description": "/{realm}/user-storage/{id}/name",
      "get": {
        "tags": [
          "UserStorageProvider"
        ],
        "description": "/\nNeed this for admin console to display simple name of provider when displaying user detail\n\nKEYCLOAK-4328\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/user-storage/{id}/remove-imported-users": {
      "description": "/{realm}/user-storage/{id}/remove-imported-users",
      "post": {
        "tags": [
          "UserStorageProvider"
        ],
        "description": "/\nRemove imported users\n\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/user-storage/{id}/sync": {
      "description": "/{realm}/user-storage/{id}/sync",
      "post": {
        "tags": [
          "UserStorageProvider"
        ],
        "description": "/\nTrigger sync of users\n\nAction can be \"triggerFullSync\" or \"triggerChangedUsersSync\"\n\n",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynchronizationResult"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/user-storage/{id}/unlink-users": {
      "description": "/{realm}/user-storage/{id}/unlink-users",
      "post": {
        "tags": [
          "UserStorageProvider"
        ],
        "description": "/\nUnlink imported users from a storage provider\n\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/user-storage/{parentId}/mappers/{id}/sync": {
      "description": "/{realm}/user-storage/{parentId}/mappers/{id}/sync",
      "post": {
        "tags": [
          "UserStorageProvider"
        ],
        "description": "/\nTrigger sync of mapper data related to ldap mapper (roles, groups, ...)\n\ndirection is \"fedToKeycloak\" or \"keycloakToFed\"\n\n",
        "parameters": [
          {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynchronizationResult"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "parentId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users": {
      "description": "/{realm}/users",
      "post": {
        "tags": [
          "Users"
        ],
        "description": "/\nCreate a new user\n\nUsername must be unique.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "description": "/\nBase path for managing users in this realm.\n\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailVerified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "idpAlias",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idpUserId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "briefRepresentation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exact",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users-management-permissions": {
      "description": "/{realm}/users-management-permissions",
      "get": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RealmAdmin"
        ],
        "description": "/\nBase path for the admin REST API for one particular realm.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagementPermissionReference"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagementPermissionReference"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}": {
      "description": "/{realm}/users/{id}",
      "put": {
        "tags": [
          "User"
        ],
        "description": "/\nUpdate the user\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "description": "/\nGet representation of the user\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRepresentation"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "description": "/\nDelete the user\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/configured-user-storage-credential-types": {
      "description": "/{realm}/users/{id}/configured-user-storage-credential-types",
      "get": {
        "tags": [
          "User"
        ],
        "description": "/\nReturn credential types, which are provided by the user storage where user is stored. Returned values can contain for example \"password\", \"otp\" etc.\nThis will always return empty list for \"local\" users, which are not backed by any user storage\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/consents": {
      "description": "/{realm}/users/{id}/consents",
      "get": {
        "tags": [
          "User"
        ],
        "description": "/\nGet consents granted by the user\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/consents/{client}": {
      "description": "/{realm}/users/{id}/consents/{client}",
      "delete": {
        "tags": [
          "User"
        ],
        "description": "/\nRevoke consent and offline tokens for particular client from user\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "description": "Client id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/credentials": {
      "description": "/{realm}/users/{id}/credentials",
      "get": {
        "tags": [
          "User"
        ],
        "description": "/\nBase path for managing users in this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CredentialRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/credentials/{credentialId}": {
      "description": "/{realm}/users/{id}/credentials/{credentialId}",
      "delete": {
        "tags": [
          "User"
        ],
        "description": "/\nRemove a credential for a user\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "credentialId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}": {
      "description": "/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}",
      "post": {
        "tags": [
          "User"
        ],
        "description": "/\nMove a credential to a position behind another credential\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "credentialId",
          "in": "path",
          "description": "The credential to move",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "newPreviousCredentialId",
          "in": "path",
          "description": "The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/credentials/{credentialId}/moveToFirst": {
      "description": "/{realm}/users/{id}/credentials/{credentialId}/moveToFirst",
      "post": {
        "tags": [
          "User"
        ],
        "description": "/\nMove a credential to a first position in the credentials list of the user\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "credentialId",
          "in": "path",
          "description": "The credential to move",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/credentials/{credentialId}/userLabel": {
      "description": "/{realm}/users/{id}/credentials/{credentialId}/userLabel",
      "put": {
        "tags": [
          "User"
        ],
        "description": "/\nUpdate a credential label for a user\n/\n",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "credentialId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/disable-credential-types": {
      "description": "/{realm}/users/{id}/disable-credential-types",
      "put": {
        "tags": [
          "User"
        ],
        "description": "/\nDisable all credentials for a user of a specific type\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/execute-actions-email": {
      "description": "/{realm}/users/{id}/execute-actions-email",
      "put": {
        "tags": [
          "User"
        ],
        "description": "/\nSend a update account email to the user\n\nAn email contains a link the user can click to perform a set of required actions.\nThe redirectUri and clientId parameters are optional. If no redirect is given, then there will\nbe no link back to click after actions have completed.  Redirect uri must be a valid uri for the\nparticular clientId.\n\n",
        "parameters": [
          {
            "name": "OIDCLoginProtocol.REDIRECT_URI_PARAM",
            "in": "query",
            "description": "Redirect uri",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OIDCLoginProtocol.CLIENT_ID_PARAM",
            "in": "query",
            "description": "Client id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lifespan",
            "in": "query",
            "description": "Number of seconds after which the generated token expires",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/federated-identity": {
      "description": "/{realm}/users/{id}/federated-identity",
      "get": {
        "tags": [
          "User"
        ],
        "description": "/\nGet social logins associated with the user\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FederatedIdentityRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/federated-identity/{provider}": {
      "description": "/{realm}/users/{id}/federated-identity/{provider}",
      "post": {
        "tags": [
          "User"
        ],
        "description": "/\nAdd a social login provider to the user\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FederatedIdentityRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "description": "/\nRemove a social login provider from user\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "provider",
          "in": "path",
          "description": "Social login provider id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/groups": {
      "description": "/{realm}/users/{id}/groups",
      "get": {
        "tags": [
          "User"
        ],
        "description": "/\nBase path for managing users in this realm.\n\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "briefRepresentation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/groups/{groupId}": {
      "description": "/{realm}/users/{id}/groups/{groupId}",
      "delete": {
        "tags": [
          "User"
        ],
        "description": "/\nBase path for managing users in this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "description": "/\nBase path for managing users in this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "groupId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/groups/count": {
      "description": "/{realm}/users/{id}/groups/count",
      "get": {
        "tags": [
          "User"
        ],
        "description": "/\nBase path for managing users in this realm.\n\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/impersonation": {
      "description": "/{realm}/users/{id}/impersonation",
      "post": {
        "tags": [
          "User"
        ],
        "description": "/\nImpersonate the user\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/logout": {
      "description": "/{realm}/users/{id}/logout",
      "post": {
        "tags": [
          "User"
        ],
        "description": "/\nRemove all user sessions associated with the user\n\nAlso send notification to all clients that have an admin URL to invalidate the sessions for the particular user.\n\n/\n",
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/offline-sessions/{clientUuid}": {
      "description": "/{realm}/users/{id}/offline-sessions/{clientUuid}",
      "get": {
        "tags": [
          "User"
        ],
        "description": "/\nGet offline sessions associated with the user and client\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "clientUuid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/reset-password": {
      "description": "/{realm}/users/{id}/reset-password",
      "put": {
        "tags": [
          "User"
        ],
        "description": "/\nSet up a new password for the user.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRepresentation"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/reset-password-email": {
      "description": "/{realm}/users/{id}/reset-password-email",
      "put": {
        "tags": [
          "User"
        ],
        "description": "/\nSend an email to the user with a link they can click to reset their password.\nThe redirectUri and clientId parameters are optional. The default for the\nredirect is the account client.\n\nThis endpoint has been deprecated.  Please use the execute-actions-email passing a list with\nUPDATE_PASSWORD within it.\n\n",
        "parameters": [
          {
            "name": "OIDCLoginProtocol.REDIRECT_URI_PARAM",
            "in": "query",
            "description": "redirect uri",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OIDCLoginProtocol.CLIENT_ID_PARAM",
            "in": "query",
            "description": "client id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings": {
      "description": "/{realm}/users/{id}/role-mappings",
      "get": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nGet role mappings\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingsRepresentation"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/clients/{client}": {
      "description": "/{realm}/users/{id}/role-mappings/clients/{client}",
      "get": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nGet client-level role mappings for the user, and the app\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nAdd client-level roles to the user role mapping\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nDelete client-level roles from user role mapping\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/clients/{client}/available": {
      "description": "/{realm}/users/{id}/role-mappings/clients/{client}/available",
      "get": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nGet available client-level roles that can be mapped to the user\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/clients/{client}/composite": {
      "description": "/{realm}/users/{id}/role-mappings/clients/{client}/composite",
      "get": {
        "tags": [
          "ClientRoleMappings"
        ],
        "description": "/\nGet effective client-level role mappings\n\nThis recurses any composite roles\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "client",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/realm": {
      "description": "/{realm}/users/{id}/role-mappings/realm",
      "get": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nGet realm-level role mappings\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nAdd realm-level role mappings to the user\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nDelete realm-level role mappings\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoleRepresentation"
                }
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/realm/available": {
      "description": "/{realm}/users/{id}/role-mappings/realm/available",
      "get": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nGet realm-level roles that can be mapped\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/role-mappings/realm/composite": {
      "description": "/{realm}/users/{id}/role-mappings/realm/composite",
      "get": {
        "tags": [
          "RoleMapper"
        ],
        "description": "/\nGet effective realm-level role mappings\n\nThis will recurse all composite roles to get the result.\n\n",
        "parameters": [
          {
            "name": "briefRepresentation",
            "in": "query",
            "description": "if false, return roles with their attributes",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/send-verify-email": {
      "description": "/{realm}/users/{id}/send-verify-email",
      "put": {
        "tags": [
          "User"
        ],
        "description": "/\nSend an email-verification email to the user\n\nAn email contains a link the user can click to verify their email address.\nThe redirectUri and clientId parameters are optional. The default for the\nredirect is the account client.\n\n",
        "parameters": [
          {
            "name": "OIDCLoginProtocol.REDIRECT_URI_PARAM",
            "in": "query",
            "description": "Redirect uri",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OIDCLoginProtocol.CLIENT_ID_PARAM",
            "in": "query",
            "description": "Client id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/{id}/sessions": {
      "description": "/{realm}/users/{id}/sessions",
      "get": {
        "tags": [
          "User"
        ],
        "description": "/\nGet sessions associated with the user\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSessionRepresentation"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/count": {
      "description": "/{realm}/users/count",
      "get": {
        "tags": [
          "Users"
        ],
        "description": "/\nBase path for managing users in this realm.\n\n",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailVerified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/{realm}/users/profile": {
      "description": "/{realm}/users/profile",
      "get": {
        "tags": [
          "UserProfile"
        ],
        "description": "/\nBase path for managing users in this realm.\n\n",
        "responses": {
          "2XX": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserProfile"
        ],
        "description": "/\nBase path for managing users in this realm.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Success"
          }
        }
      },
      "parameters": [
        {
          "name": "realm",
          "in": "path",
          "description": "realm name (not id!)",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "AbstractAuthenticationExecutionRepresentation": {
        "type": "object",
        "properties": {
          "AuthenticatorConfig": {
            "type": "string"
          },
          "Authenticator": {
            "type": "string"
          },
          "Requirement": {
            "type": "string"
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "AutheticatorFlow": {
            "type": "boolean"
          },
          "AuthenticatorFlow": {
            "type": "boolean"
          }
        }
      },
      "AuthDetailsRepresentation": {
        "type": "object",
        "properties": {
          "RealmId": {
            "type": "string"
          },
          "ClientId": {
            "type": "string"
          },
          "UserId": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          }
        }
      },
      "AuthenticationExecutionExportRepresentation": {
        "type": "object",
        "properties": {
          "UserSetupAllowed": {
            "type": "boolean"
          },
          "FlowAlias": {
            "type": "string"
          }
        }
      },
      "AuthenticationExecutionInfoRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Alias": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Requirement": {
            "type": "string"
          },
          "RequirementChoices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Configurable": {
            "type": "boolean"
          },
          "ProviderId": {
            "type": "string"
          },
          "AuthenticationConfig": {
            "type": "string"
          },
          "AuthenticationFlow": {
            "type": "boolean"
          },
          "Level": {
            "type": "integer",
            "format": "int32"
          },
          "Index": {
            "type": "integer",
            "format": "int32"
          },
          "FlowId": {
            "type": "string"
          }
        }
      },
      "AuthenticationExecutionRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "FlowId": {
            "type": "string"
          },
          "ParentFlow": {
            "type": "string"
          }
        }
      },
      "AuthenticationFlowRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Alias": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ProviderId": {
            "type": "string"
          },
          "TopLevel": {
            "type": "boolean"
          },
          "BuiltIn": {
            "type": "boolean"
          },
          "AuthenticationExecutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationExecutionExportRepresentation"
            }
          }
        }
      },
      "AuthenticatorConfigRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Alias": {
            "type": "string"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CertificateRepresentation": {
        "type": "object",
        "properties": {
          "PrivateKey": {
            "type": "string"
          },
          "PublicKey": {
            "type": "string"
          },
          "Certificate": {
            "type": "string"
          },
          "Kid": {
            "type": "string"
          }
        }
      },
      "ClaimRepresentation": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "boolean"
          },
          "Username": {
            "type": "boolean"
          },
          "Profile": {
            "type": "boolean"
          },
          "Picture": {
            "type": "boolean"
          },
          "Website": {
            "type": "boolean"
          },
          "Email": {
            "type": "boolean"
          },
          "Gender": {
            "type": "boolean"
          },
          "Locale": {
            "type": "boolean"
          },
          "Address": {
            "type": "boolean"
          },
          "Phone": {
            "type": "boolean"
          }
        }
      },
      "ClientInitialAccessCreatePresentation": {
        "type": "object",
        "properties": {
          "Expiration": {
            "type": "integer",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ClientInitialAccessPresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Token": {
            "type": "string"
          },
          "Timestamp": {
            "type": "integer",
            "format": "int32"
          },
          "Expiration": {
            "type": "integer",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "RemainingCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ClientPoliciesRepresentation": {
        "type": "object",
        "properties": {
          "Policies": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "ClientPolicyRepresentation"
            }
          }
        }
      },
      "ClientPolicyConditionConfigurationRepresentation": {
        "type": "object",
        "properties": {
          "NegativeLogic": {
            "type": "boolean"
          },
          "ConfigAsMap": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ClientPolicyConditionRepresentation": {
        "type": "object",
        "properties": {
          "ConditionProviderId": {
            "type": "string"
          },
          "Configuration": {
            "type": "object"
          }
        }
      },
      "ClientPolicyExecutorConfigurationRepresentation": {
        "type": "object",
        "properties": {
          "ConfigAsMap": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ClientPolicyExecutorRepresentation": {
        "type": "object",
        "properties": {
          "ExecutorProviderId": {
            "type": "string"
          },
          "Configuration": {
            "type": "object"
          }
        }
      },
      "ClientProfileRepresentation": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Executors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientPolicyExecutorRepresentation"
            }
          }
        }
      },
      "ClientProfilesRepresentation": {
        "type": "object",
        "properties": {
          "Profiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientProfileRepresentation"
            }
          },
          "GlobalProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientProfileRepresentation"
            }
          }
        }
      },
      "ComponentExportRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ProviderId": {
            "type": "string"
          },
          "SubType": {
            "type": "string"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "SubComponents": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComponentExportRepresentation"
            }
          }
        }
      },
      "ComponentRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ProviderId": {
            "type": "string"
          },
          "ProviderType": {
            "type": "string"
          },
          "ParentId": {
            "type": "string"
          },
          "SubType": {
            "type": "string"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ConfigPropertyRepresentation": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Label": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "DefaultValue": {
            "type": "object"
          },
          "HelpText": {
            "type": "string"
          },
          "Options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Secret": {
            "type": "boolean"
          }
        }
      },
      "CredentialRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "UserLabel": {
            "type": "string"
          },
          "SecretData": {
            "type": "string"
          },
          "CredentialData": {
            "type": "string"
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "CreatedDate": {
            "type": "integer",
            "format": "int64"
          },
          "Value": {
            "type": "string"
          },
          "Temporary": {
            "type": "boolean"
          },
          "Device": {
            "type": "string"
          },
          "HashedSaltedValue": {
            "type": "string"
          },
          "Salt": {
            "type": "string"
          },
          "HashIterations": {
            "type": "integer",
            "format": "int32"
          },
          "Counter": {
            "type": "integer",
            "format": "int32"
          },
          "Algorithm": {
            "type": "string"
          },
          "Digits": {
            "type": "integer",
            "format": "int32"
          },
          "Period": {
            "type": "integer",
            "format": "int32"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "EventRepresentation": {
        "type": "object",
        "properties": {
          "Time": {
            "type": "integer",
            "format": "int64"
          },
          "Type": {
            "type": "string"
          },
          "RealmId": {
            "type": "string"
          },
          "ClientId": {
            "type": "string"
          },
          "UserId": {
            "type": "string"
          },
          "SessionId": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "Error": {
            "type": "string"
          },
          "Details": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "FederatedIdentityRepresentation": {
        "type": "object",
        "properties": {
          "IdentityProvider": {
            "type": "string"
          },
          "UserId": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          }
        }
      },
      "GroupRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "RealmRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ClientRoles": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "SubGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRepresentation"
            }
          },
          "Access": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "IdentityProviderMapperRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "IdentityProviderAlias": {
            "type": "string"
          },
          "IdentityProviderMapper": {
            "type": "string"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "IdentityProviderMapperTypeRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Category": {
            "type": "string"
          },
          "HelpText": {
            "type": "string"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigPropertyRepresentation"
            }
          }
        }
      },
      "IdentityProviderRepresentation": {
        "type": "object",
        "properties": {
          "InternalId": {
            "type": "string"
          },
          "Alias": {
            "type": "string"
          },
          "ProviderId": {
            "type": "string"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Enabled": {
            "type": "boolean"
          },
          "LinkOnly": {
            "type": "boolean"
          },
          "UpdateProfileFirstLoginMode": {
            "type": "string"
          },
          "AuthenticateByDefault": {
            "type": "boolean"
          },
          "FirstBrokerLoginFlowAlias": {
            "type": "string"
          },
          "PostBrokerLoginFlowAlias": {
            "type": "string"
          },
          "StoreToken": {
            "type": "boolean"
          },
          "AddReadTokenRoleOnCreate": {
            "type": "boolean"
          },
          "TrustEmail": {
            "type": "boolean"
          },
          "DisplayName": {
            "type": "string"
          }
        }
      },
      "KeyMetadataRepresentation": {
        "type": "object",
        "properties": {
          "ProviderId": {
            "type": "string"
          },
          "ProviderPriority": {
            "type": "integer",
            "format": "int64"
          },
          "Kid": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Algorithm": {
            "type": "string"
          },
          "PublicKey": {
            "type": "string"
          },
          "Certificate": {
            "type": "string"
          },
          "Use": {
            "type": "object",
            "description": "KeyUse"
          }
        }
      },
      "LDAPCapabilityRepresentation": {
        "type": "object",
        "properties": {
          "Oid": {
            "type": "string"
          },
          "Type": {
            "type": "object",
            "description": "CapabilityType"
          }
        }
      },
      "ManagementPermissionReference": {
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean"
          },
          "Resource": {
            "type": "string"
          },
          "ScopePermissions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ManagementPermissionRepresentation": {
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean"
          }
        }
      },
      "OAuth2ErrorRepresentation": {
        "type": "object",
        "properties": {
          "Error": {
            "type": "string"
          },
          "ErrorDescription": {
            "type": "string"
          }
        }
      },
      "OAuthClientRepresentation": {
        "type": "object"
      },
      "PasswordPolicyTypeRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ConfigType": {
            "type": "string"
          },
          "DefaultValue": {
            "type": "string"
          },
          "MultipleSupported": {
            "type": "boolean"
          }
        }
      },
      "ProtocolMapperRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Protocol": {
            "type": "string"
          },
          "ProtocolMapper": {
            "type": "string"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ConsentRequired": {
            "type": "boolean"
          },
          "ConsentText": {
            "type": "string"
          }
        }
      },
      "ProtocolMapperTypeRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Category": {
            "type": "string"
          },
          "HelpText": {
            "type": "string"
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigPropertyRepresentation"
            }
          }
        }
      },
      "PublishedRealmRepresentation": {
        "type": "object",
        "properties": {
          "PublicKeyPem": {
            "type": "string"
          },
          "TokenServiceUrl": {
            "type": "string"
          },
          "AccountServiceUrl": {
            "type": "string"
          },
          "NotBefore": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RealmEventsConfigRepresentation": {
        "type": "object",
        "properties": {
          "EventsEnabled": {
            "type": "boolean"
          },
          "EventsExpiration": {
            "type": "integer",
            "format": "int64"
          },
          "EventsListeners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "EnabledEventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AdminEventsEnabled": {
            "type": "boolean"
          },
          "AdminEventsDetailsEnabled": {
            "type": "boolean"
          }
        }
      },
      "RequiredActionProviderRepresentation": {
        "type": "object",
        "properties": {
          "Alias": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          },
          "DefaultAction": {
            "type": "boolean"
          },
          "ProviderId": {
            "type": "string"
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RequiredActionProviderSimpleRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ProviderId": {
            "type": "string"
          }
        }
      },
      "Composites": {
        "type": "object",
        "properties": {
          "Realm": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Client": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "Application": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "ScopeMappingRepresentation": {
        "type": "object",
        "properties": {
          "Self": {
            "type": "string"
          },
          "Client": {
            "type": "string"
          },
          "ClientTemplate": {
            "type": "string"
          },
          "ClientScope": {
            "type": "string"
          },
          "Roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SocialLinkRepresentation": {
        "type": "object",
        "properties": {
          "SocialProvider": {
            "type": "string"
          },
          "SocialUserId": {
            "type": "string"
          },
          "SocialUsername": {
            "type": "string"
          }
        }
      },
      "SynchronizationResultRepresentation": {
        "type": "object",
        "properties": {
          "Ignored": {
            "type": "boolean"
          },
          "Added": {
            "type": "integer",
            "format": "int32"
          },
          "Updated": {
            "type": "integer",
            "format": "int32"
          },
          "Removed": {
            "type": "integer",
            "format": "int32"
          },
          "Failed": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "type": "string"
          }
        }
      },
      "TestLdapConnectionRepresentation": {
        "type": "object",
        "properties": {
          "Action": {
            "type": "string"
          },
          "ConnectionUrl": {
            "type": "string"
          },
          "AuthType": {
            "type": "string"
          },
          "BindDn": {
            "type": "string"
          },
          "BindCredential": {
            "type": "string"
          },
          "UseTruststoreSpi": {
            "type": "string"
          },
          "ConnectionTimeout": {
            "type": "string"
          },
          "ComponentId": {
            "type": "string"
          },
          "StartTls": {
            "type": "string"
          }
        }
      },
      "UserConsentRepresentation": {
        "type": "object",
        "properties": {
          "ClientId": {
            "type": "string"
          },
          "GrantedClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "CreatedDate": {
            "type": "integer",
            "format": "int64"
          },
          "LastUpdatedDate": {
            "type": "integer",
            "format": "int64"
          },
          "GrantedRealmRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserFederationMapperRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "FederationProviderDisplayName": {
            "type": "string"
          },
          "FederationMapperType": {
            "type": "string"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UserFederationMapperSyncConfigRepresentation": {
        "type": "object",
        "properties": {
          "FedToKeycloakSyncSupported": {
            "type": "boolean"
          },
          "FedToKeycloakSyncMessage": {
            "type": "string"
          },
          "KeycloakToFedSyncSupported": {
            "type": "boolean"
          },
          "KeycloakToFedSyncMessage": {
            "type": "string"
          }
        }
      },
      "UserFederationMapperTypeRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Category": {
            "type": "string"
          },
          "HelpText": {
            "type": "string"
          },
          "SyncConfig": {
            "$ref": "#/components/schemas/UserFederationMapperSyncConfigRepresentation"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigPropertyRepresentation"
            }
          },
          "DefaultConfig": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UserFederationProviderFactoryRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "HelpText": {
            "type": "string"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigPropertyRepresentation"
            }
          }
        }
      },
      "UserFederationProviderRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ProviderName": {
            "type": "string"
          },
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "FullSyncPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "ChangedSyncPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "LastSync": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserRepresentation": {
        "type": "object",
        "properties": {
          "Self": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "CreatedTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          },
          "Totp": {
            "type": "boolean"
          },
          "EmailVerified": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "Credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialRepresentation"
            }
          },
          "RequiredActions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "FederatedIdentities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FederatedIdentityRepresentation"
            }
          },
          "SocialLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialLinkRepresentation"
            }
          },
          "RealmRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ClientRoles": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "ClientConsents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserConsentRepresentation"
            }
          },
          "NotBefore": {
            "type": "integer",
            "format": "int32"
          },
          "ApplicationRoles": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "FederationLink": {
            "type": "string"
          },
          "ServiceAccountClientId": {
            "type": "string"
          },
          "Groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Origin": {
            "type": "string"
          },
          "DisableableCredentialTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Access": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "UserSessionRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          },
          "UserId": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "Start": {
            "type": "integer",
            "format": "int64"
          },
          "LastAccess": {
            "type": "integer",
            "format": "int64"
          },
          "Clients": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Access": {
        "type": "object",
        "properties": {
          "Roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "VerifyCaller": {
            "type": "boolean"
          }
        }
      },
      "CertConf": {
        "type": "object",
        "properties": {
          "CertThumbprint": {
            "type": "string"
          }
        }
      },
      "AccessTokenResponse": {
        "type": "object",
        "properties": {
          "Scope": {
            "type": "string"
          },
          "Token": {
            "type": "string"
          },
          "ExpiresIn": {
            "type": "integer",
            "format": "int64"
          },
          "RefreshExpiresIn": {
            "type": "integer",
            "format": "int64"
          },
          "RefreshToken": {
            "type": "string"
          },
          "TokenType": {
            "type": "string"
          },
          "IdToken": {
            "type": "string"
          },
          "NotBeforePolicy": {
            "type": "integer",
            "format": "int32"
          },
          "SessionState": {
            "type": "string"
          },
          "OtherClaims": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "Error": {
            "type": "string"
          },
          "ErrorDescription": {
            "type": "string"
          },
          "ErrorUri": {
            "type": "string"
          }
        }
      },
      "AddressClaimSet": {
        "type": "object",
        "properties": {
          "FormattedAddress": {
            "type": "string"
          },
          "StreetAddress": {
            "type": "string"
          },
          "Locality": {
            "type": "string"
          },
          "Region": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          }
        }
      },
      "AuthorizationResponseToken": {
        "type": "object",
        "properties": {
          "Category": {
            "enum": [
              "INTERNAL",
              "ACCESS",
              "ID",
              "ADMIN",
              "USERINFO",
              "LOGOUT",
              "AUTHORIZATION_RESPONSE"
            ],
            "type": "string",
            "description": "TokenCategory"
          }
        }
      },
      "IDToken": {
        "type": "object",
        "properties": {
          "Nonce": {
            "type": "string"
          },
          "Auth_time": {
            "type": "integer",
            "format": "int64"
          },
          "SessionId": {
            "type": "string"
          },
          "SessionState": {
            "type": "string"
          },
          "AccessTokenHash": {
            "type": "string"
          },
          "CodeHash": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "GivenName": {
            "type": "string"
          },
          "FamilyName": {
            "type": "string"
          },
          "MiddleName": {
            "type": "string"
          },
          "NickName": {
            "type": "string"
          },
          "PreferredUsername": {
            "type": "string"
          },
          "Profile": {
            "type": "string"
          },
          "Picture": {
            "type": "string"
          },
          "Website": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "EmailVerified": {
            "type": "boolean"
          },
          "Gender": {
            "type": "string"
          },
          "Birthdate": {
            "type": "string"
          },
          "Zoneinfo": {
            "type": "string"
          },
          "Locale": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PhoneNumberVerified": {
            "type": "boolean"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressClaimSet"
          },
          "UpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "ClaimsLocales": {
            "type": "string"
          },
          "Acr": {
            "type": "string"
          },
          "StateHash": {
            "type": "string"
          },
          "Category": {
            "enum": [
              "INTERNAL",
              "ACCESS",
              "ID",
              "ADMIN",
              "USERINFO",
              "LOGOUT",
              "AUTHORIZATION_RESPONSE"
            ],
            "type": "string",
            "description": "TokenCategory"
          }
        }
      },
      "JsonWebToken": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Exp": {
            "type": "integer",
            "format": "int64"
          },
          "Nbf": {
            "type": "integer",
            "format": "int64"
          },
          "Iat": {
            "type": "integer",
            "format": "int64"
          },
          "Issuer": {
            "type": "string"
          },
          "suer": {
            "$ref": "#/components/schemas/JsonWebToken"
          },
          "Subject": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "IssuedFor": {
            "type": "string"
          },
          "suedFor": {
            "$ref": "#/components/schemas/JsonWebToken"
          },
          "OtherClaims": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "Category": {
            "enum": [
              "INTERNAL",
              "ACCESS",
              "ID",
              "ADMIN",
              "USERINFO",
              "LOGOUT",
              "AUTHORIZATION_RESPONSE"
            ],
            "type": "string",
            "description": "TokenCategory"
          }
        }
      },
      "KeyStoreConfig": {
        "type": "object",
        "properties": {
          "RealmCertificate": {
            "type": "boolean"
          },
          "StorePassword": {
            "type": "string"
          },
          "KeyPassword": {
            "type": "string"
          },
          "KeyAlias": {
            "type": "string"
          },
          "RealmAlias": {
            "type": "string"
          },
          "Format": {
            "type": "string"
          }
        }
      },
      "LogoutToken": {
        "type": "object",
        "properties": {
          "Events": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "Sid": {
            "type": "string"
          },
          "Category": {
            "enum": [
              "INTERNAL",
              "ACCESS",
              "ID",
              "ADMIN",
              "USERINFO",
              "LOGOUT",
              "AUTHORIZATION_RESPONSE"
            ],
            "type": "string",
            "description": "TokenCategory"
          }
        }
      },
      "OAuth2DeviceAuthorizationResponse": {
        "type": "object",
        "properties": {
          "DeviceCode": {
            "type": "string"
          },
          "UserCode": {
            "type": "string"
          },
          "VerificationUri": {
            "type": "string"
          },
          "VerificationUriComplete": {
            "type": "string"
          },
          "ExpiresIn": {
            "type": "integer",
            "format": "int64"
          },
          "Interval": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "Category": {
            "enum": [
              "INTERNAL",
              "ACCESS",
              "ID",
              "ADMIN",
              "USERINFO",
              "LOGOUT",
              "AUTHORIZATION_RESPONSE"
            ],
            "type": "string",
            "description": "TokenCategory"
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "Issuer": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "GivenName": {
            "type": "string"
          },
          "FamilyName": {
            "type": "string"
          },
          "MiddleName": {
            "type": "string"
          },
          "NickName": {
            "type": "string"
          },
          "PreferredUsername": {
            "type": "string"
          },
          "Profile": {
            "type": "string"
          },
          "Picture": {
            "type": "string"
          },
          "Website": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "EmailVerified": {
            "type": "boolean"
          },
          "Gender": {
            "type": "string"
          },
          "Birthdate": {
            "type": "string"
          },
          "Zoneinfo": {
            "type": "string"
          },
          "Locale": {
            "type": "string"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "PhoneNumberVerified": {
            "type": "boolean"
          },
          "Address": {
            "$ref": "#/components/schemas/AddressClaimSet"
          },
          "UpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "Sub": {
            "type": "string"
          },
          "ClaimsLocales": {
            "type": "string"
          },
          "OtherClaims": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "VersionRepresentation": {
        "type": "object",
        "properties": {
          "Version": {
            "type": "string"
          },
          "BuildTime": {
            "type": "string"
          }
        }
      },
      "SynchronizationResult": {
        "type": "object",
        "properties": {
          "Ignored": {
            "type": "boolean"
          },
          "Added": {
            "type": "integer",
            "format": "int32"
          },
          "Updated": {
            "type": "integer",
            "format": "int32"
          },
          "Removed": {
            "type": "integer",
            "format": "int32"
          },
          "Failed": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "type": "string"
          }
        }
      },
      "ProtocolMapperEvaluationRepresentation": {
        "type": "object",
        "properties": {
          "MapperId": {
            "type": "string"
          },
          "MapperName": {
            "type": "string"
          },
          "ContainerId": {
            "type": "string"
          },
          "ContainerName": {
            "type": "string"
          },
          "ContainerType": {
            "type": "string"
          },
          "ProtocolMapper": {
            "type": "string"
          }
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "ResourceId": {
            "type": "string"
          },
          "ResourceName": {
            "type": "string"
          },
          "Scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Claims": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "AggregatePolicyRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          }
        }
      },
      "ClientScopeDefinition": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Required": {
            "type": "boolean"
          }
        }
      },
      "GroupDefinition": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "ExtendChildren": {
            "type": "boolean"
          }
        }
      },
      "JSPolicyRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Code": {
            "type": "string"
          }
        }
      },
      "PermissionTicketRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Owner": {
            "type": "string"
          },
          "Resource": {
            "type": "string"
          },
          "Scope": {
            "type": "string"
          },
          "Granted": {
            "type": "boolean"
          },
          "ScopeName": {
            "type": "string"
          },
          "ResourceName": {
            "type": "string"
          },
          "RequesterName": {
            "type": "string"
          },
          "Requester": {
            "type": "string"
          },
          "OwnerName": {
            "type": "string"
          }
        }
      },
      "PolicyProviderRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Group": {
            "type": "string"
          }
        }
      },
      "PolicyRepresentation": {
        "type": "object",
        "properties": {
          "Config": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RegexPolicyRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "TargetClaim": {
            "type": "string"
          },
          "Pattern": {
            "type": "string"
          }
        }
      },
      "ResourceOwnerRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ResourcePermissionRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "ResourceType": {
            "type": "string"
          }
        }
      },
      "RoleDefinition": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Required": {
            "type": "boolean"
          }
        }
      },
      "ScopePermissionRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "ResourceType": {
            "type": "string"
          }
        }
      },
      "TimePolicyRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "NotBefore": {
            "type": "string"
          },
          "NotOnOrAfter": {
            "type": "string"
          },
          "DayMonth": {
            "type": "string"
          },
          "DayMonthEnd": {
            "type": "string"
          },
          "Month": {
            "type": "string"
          },
          "MonthEnd": {
            "type": "string"
          },
          "Year": {
            "type": "string"
          },
          "YearEnd": {
            "type": "string"
          },
          "Hour": {
            "type": "string"
          },
          "HourEnd": {
            "type": "string"
          },
          "Minute": {
            "type": "string"
          },
          "MinuteEnd": {
            "type": "string"
          }
        }
      },
      "UmaPermissionRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Clients": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Condition": {
            "type": "string"
          }
        }
      },
      "UserPolicyRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdminEventRepresentation": {
        "type": "object",
        "properties": {
          "Time": {
            "type": "integer",
            "format": "int64"
          },
          "RealmId": {
            "type": "string"
          },
          "AuthDetails": {
            "$ref": "#/components/schemas/AuthDetailsRepresentation"
          },
          "OperationType": {
            "type": "string"
          },
          "ResourceType": {
            "type": "string"
          },
          "ResourcePath": {
            "type": "string"
          },
          "Representation": {
            "type": "string"
          },
          "Error": {
            "type": "string"
          }
        }
      },
      "ApplicationRepresentation": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Claims": {
            "$ref": "#/components/schemas/ClaimRepresentation"
          }
        }
      },
      "AuthenticatorConfigInfoRepresentation": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "HelpText": {
            "type": "string"
          },
          "ProviderId": {
            "type": "string"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigPropertyRepresentation"
            }
          }
        }
      },
      "ClientScopeRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ProtocolMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolMapperRepresentation"
            }
          },
          "Protocol": {
            "type": "string"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ClientTemplateRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ProtocolMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolMapperRepresentation"
            }
          },
          "Protocol": {
            "type": "string"
          },
          "FullScopeAllowed": {
            "type": "boolean"
          },
          "BearerOnly": {
            "type": "boolean"
          },
          "ConsentRequired": {
            "type": "boolean"
          },
          "StandardFlowEnabled": {
            "type": "boolean"
          },
          "ImplicitFlowEnabled": {
            "type": "boolean"
          },
          "DirectAccessGrantsEnabled": {
            "type": "boolean"
          },
          "ServiceAccountsEnabled": {
            "type": "boolean"
          },
          "PublicClient": {
            "type": "boolean"
          },
          "FrontchannelLogout": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ComponentTypeRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "HelpText": {
            "type": "string"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigPropertyRepresentation"
            }
          },
          "Metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "KeysMetadataRepresentation": {
        "type": "object",
        "properties": {
          "Active": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "Keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyMetadataRepresentation"
            }
          }
        }
      },
      "RoleRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ScopeParamRequired": {
            "type": "boolean"
          },
          "Composites": {
            "$ref": "#/components/schemas/Composites"
          },
          "Composite": {
            "type": "boolean"
          },
          "ClientRole": {
            "type": "boolean"
          },
          "ContainerId": {
            "type": "string"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "RolesRepresentation": {
        "type": "object",
        "properties": {
          "Realm": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRepresentation"
            }
          },
          "Client": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          },
          "Application": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RoleRepresentation"
              }
            }
          }
        }
      },
      "Authorization": {
        "type": "object",
        "properties": {
          "Permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        }
      },
      "ClientScopePolicyRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "ClientScopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientScopeDefinition"
            }
          }
        }
      },
      "GroupPolicyRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "GroupsClaim": {
            "type": "string"
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupDefinition"
            }
          }
        }
      },
      "RolePolicyRepresentation": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleDefinition"
            }
          }
        }
      },
      "ClientMappingsRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Client": {
            "type": "string"
          },
          "Mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRepresentation"
            }
          }
        }
      },
      "MappingsRepresentation": {
        "type": "object",
        "properties": {
          "RealmMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleRepresentation"
            }
          },
          "ClientMappings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ClientMappingsRepresentation"
            }
          }
        }
      },
      "AccessToken": {
        "type": "object",
        "properties": {
          "suedAt": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "suer": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "AllowedOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "RealmAccess": {
            "$ref": "#/components/schemas/Access"
          },
          "TrustedCertificates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "suedFor": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "Authorization": {
            "$ref": "#/components/schemas/Authorization"
          },
          "CertConf": {
            "$ref": "#/components/schemas/CertConf"
          },
          "Scope": {
            "type": "string"
          },
          "Category": {
            "enum": [
              "INTERNAL",
              "ACCESS",
              "ID",
              "ADMIN",
              "USERINFO",
              "LOGOUT",
              "AUTHORIZATION_RESPONSE"
            ],
            "type": "string",
            "description": "TokenCategory"
          }
        }
      },
      "ClientRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ClientId": {
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          },
          "AlwaysDisplayInConsole": {
            "type": "boolean"
          },
          "SurrogateAuthRequired": {
            "type": "boolean"
          },
          "RootUrl": {
            "type": "string"
          },
          "AdminUrl": {
            "type": "string"
          },
          "BaseUrl": {
            "type": "string"
          },
          "ClientAuthenticatorType": {
            "type": "string"
          },
          "Secret": {
            "type": "string"
          },
          "RegistrationAccessToken": {
            "type": "string"
          },
          "RedirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "WebOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DefaultRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "NotBefore": {
            "type": "integer",
            "format": "int32"
          },
          "BearerOnly": {
            "type": "boolean"
          },
          "ConsentRequired": {
            "type": "boolean"
          },
          "StandardFlowEnabled": {
            "type": "boolean"
          },
          "ImplicitFlowEnabled": {
            "type": "boolean"
          },
          "DirectAccessGrantsEnabled": {
            "type": "boolean"
          },
          "ServiceAccountsEnabled": {
            "type": "boolean"
          },
          "AuthorizationServicesEnabled": {
            "type": "boolean"
          },
          "DirectGrantsOnly": {
            "type": "boolean"
          },
          "PublicClient": {
            "type": "boolean"
          },
          "FullScopeAllowed": {
            "type": "boolean"
          },
          "Protocol": {
            "type": "string"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "AuthenticationFlowBindingOverrides": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "NodeReRegistrationTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "RegisteredNodes": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "FrontchannelLogout": {
            "type": "boolean"
          },
          "ProtocolMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolMapperRepresentation"
            }
          },
          "ClientTemplate": {
            "type": "string"
          },
          "UseTemplateConfig": {
            "type": "boolean"
          },
          "UseTemplateScope": {
            "type": "boolean"
          },
          "UseTemplateMappers": {
            "type": "boolean"
          },
          "DefaultClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OptionalClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AuthorizationSettings": {
            "$ref": "#/components/schemas/ResourceServerRepresentation"
          },
          "Access": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "Origin": {
            "type": "string"
          }
        }
      },
      "PartialImportRepresentation": {
        "type": "object",
        "properties": {
          "IfResourceExists": {
            "type": "string"
          },
          "Policy": {
            "type": "object",
            "description": "Policy"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRepresentation"
            }
          },
          "Clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientRepresentation"
            }
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRepresentation"
            }
          },
          "IdentityProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderRepresentation"
            }
          },
          "Roles": {
            "$ref": "#/components/schemas/RolesRepresentation"
          }
        }
      },
      "RealmRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Realm": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "DisplayNameHtml": {
            "type": "string"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRepresentation"
            }
          },
          "Applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationRepresentation"
            }
          },
          "Clients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientRepresentation"
            }
          },
          "Enabled": {
            "type": "boolean"
          },
          "SslRequired": {
            "type": "string"
          },
          "DefaultSignatureAlgorithm": {
            "type": "string"
          },
          "RevokeRefreshToken": {
            "type": "boolean"
          },
          "RefreshTokenMaxReuse": {
            "type": "integer",
            "format": "int32"
          },
          "AccessTokenLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "AccessTokenLifespanForImplicitFlow": {
            "type": "integer",
            "format": "int32"
          },
          "SsoSessionIdleTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "SsoSessionMaxLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "SsoSessionMaxLifespanRememberMe": {
            "type": "integer",
            "format": "int32"
          },
          "SsoSessionIdleTimeoutRememberMe": {
            "type": "integer",
            "format": "int32"
          },
          "OfflineSessionIdleTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "OfflineSessionMaxLifespanEnabled": {
            "type": "boolean"
          },
          "OfflineSessionMaxLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "ClientSessionIdleTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "ClientSessionMaxLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "ClientOfflineSessionIdleTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "ClientOfflineSessionMaxLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "ScopeMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeMappingRepresentation"
            }
          },
          "RequiredCredentials": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PasswordPolicy": {
            "type": "string"
          },
          "AccessCodeLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "AccessCodeLifespanUserAction": {
            "type": "integer",
            "format": "int32"
          },
          "AccessCodeLifespanLogin": {
            "type": "integer",
            "format": "int32"
          },
          "ActionTokenGeneratedByAdminLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "OAuth2DeviceCodeLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "OAuth2DevicePollingInterval": {
            "type": "integer",
            "format": "int32"
          },
          "ActionTokenGeneratedByUserLifespan": {
            "type": "integer",
            "format": "int32"
          },
          "DefaultRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DefaultRole": {
            "$ref": "#/components/schemas/RoleRepresentation"
          },
          "DefaultGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "PrivateKey": {
            "type": "string"
          },
          "PublicKey": {
            "type": "string"
          },
          "Certificate": {
            "type": "string"
          },
          "CodeSecret": {
            "type": "string"
          },
          "PasswordCredentialGrantAllowed": {
            "type": "boolean"
          },
          "RegistrationAllowed": {
            "type": "boolean"
          },
          "RegistrationEmailAsUsername": {
            "type": "boolean"
          },
          "RememberMe": {
            "type": "boolean"
          },
          "VerifyEmail": {
            "type": "boolean"
          },
          "LoginWithEmailAllowed": {
            "type": "boolean"
          },
          "DuplicateEmailsAllowed": {
            "type": "boolean"
          },
          "ResetPasswordAllowed": {
            "type": "boolean"
          },
          "EditUsernameAllowed": {
            "type": "boolean"
          },
          "Social": {
            "type": "boolean"
          },
          "UpdateProfileOnInitialSocialLogin": {
            "type": "boolean"
          },
          "BrowserSecurityHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "SocialProviders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "SmtpServer": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "OauthClients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthClientRepresentation"
            }
          },
          "ClientScopeMappings": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScopeMappingRepresentation"
              }
            }
          },
          "ApplicationScopeMappings": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScopeMappingRepresentation"
              }
            }
          },
          "Roles": {
            "$ref": "#/components/schemas/RolesRepresentation"
          },
          "LoginTheme": {
            "type": "string"
          },
          "AccountTheme": {
            "type": "string"
          },
          "AdminTheme": {
            "type": "string"
          },
          "EmailTheme": {
            "type": "string"
          },
          "NotBefore": {
            "type": "integer",
            "format": "int32"
          },
          "BruteForceProtected": {
            "type": "boolean"
          },
          "PermanentLockout": {
            "type": "boolean"
          },
          "MaxFailureWaitSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "MinimumQuickLoginWaitSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "WaitIncrementSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "QuickLoginCheckMilliSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "MaxDeltaTimeSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "FailureFactor": {
            "type": "integer",
            "format": "int32"
          },
          "EventsEnabled": {
            "type": "boolean"
          },
          "EventsExpiration": {
            "type": "integer",
            "format": "int64"
          },
          "EventsListeners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "EnabledEventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "AdminEventsEnabled": {
            "type": "boolean"
          },
          "AdminEventsDetailsEnabled": {
            "type": "boolean"
          },
          "UserFederationProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFederationProviderRepresentation"
            }
          },
          "UserFederationMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFederationMapperRepresentation"
            }
          },
          "IdentityProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderRepresentation"
            }
          },
          "ProtocolMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProtocolMapperRepresentation"
            }
          },
          "InternationalizationEnabled": {
            "type": "boolean"
          },
          "SupportedLocales": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DefaultLocale": {
            "type": "string"
          },
          "IdentityProviderMappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityProviderMapperRepresentation"
            }
          },
          "AuthenticationFlows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationFlowRepresentation"
            }
          },
          "AuthenticatorConfig": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticatorConfigRepresentation"
            }
          },
          "RequiredActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequiredActionProviderRepresentation"
            }
          },
          "OtpPolicyType": {
            "type": "string"
          },
          "OtpPolicyAlgorithm": {
            "type": "string"
          },
          "OtpPolicyInitialCounter": {
            "type": "integer",
            "format": "int32"
          },
          "OtpPolicyDigits": {
            "type": "integer",
            "format": "int32"
          },
          "OtpPolicyLookAheadWindow": {
            "type": "integer",
            "format": "int32"
          },
          "OtpPolicyPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "OtpSupportedApplications": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "WebAuthnPolicyRpEntityName": {
            "type": "string"
          },
          "WebAuthnPolicySignatureAlgorithms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "WebAuthnPolicyRpId": {
            "type": "string"
          },
          "WebAuthnPolicyAttestationConveyancePreference": {
            "type": "string"
          },
          "WebAuthnPolicyAuthenticatorAttachment": {
            "type": "string"
          },
          "WebAuthnPolicyRequireResidentKey": {
            "type": "string"
          },
          "WebAuthnPolicyUserVerificationRequirement": {
            "type": "string"
          },
          "WebAuthnPolicyCreateTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "WebAuthnPolicyAvoidSameAuthenticatorRegister": {
            "type": "boolean"
          },
          "WebAuthnPolicyAcceptableAaguids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "WebAuthnPolicyPasswordlessRpEntityName": {
            "type": "string"
          },
          "WebAuthnPolicyPasswordlessSignatureAlgorithms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "WebAuthnPolicyPasswordlessRpId": {
            "type": "string"
          },
          "WebAuthnPolicyPasswordlessAttestationConveyancePreference": {
            "type": "string"
          },
          "WebAuthnPolicyPasswordlessAuthenticatorAttachment": {
            "type": "string"
          },
          "WebAuthnPolicyPasswordlessRequireResidentKey": {
            "type": "string"
          },
          "WebAuthnPolicyPasswordlessUserVerificationRequirement": {
            "type": "string"
          },
          "WebAuthnPolicyPasswordlessCreateTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": {
            "type": "boolean"
          },
          "WebAuthnPolicyPasswordlessAcceptableAaguids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "BrowserFlow": {
            "type": "string"
          },
          "RegistrationFlow": {
            "type": "string"
          },
          "DirectGrantFlow": {
            "type": "string"
          },
          "ResetCredentialsFlow": {
            "type": "string"
          },
          "ClientAuthenticationFlow": {
            "type": "string"
          },
          "DockerAuthenticationFlow": {
            "type": "string"
          },
          "KeycloakVersion": {
            "type": "string"
          },
          "Groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRepresentation"
            }
          },
          "ClientTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientTemplateRepresentation"
            }
          },
          "ClientScopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientScopeRepresentation"
            }
          },
          "DefaultDefaultClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "DefaultOptionalClientScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Components": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComponentExportRepresentation"
            }
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "FederatedUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRepresentation"
            }
          },
          "UserManagedAccessAllowed": {
            "type": "boolean"
          }
        }
      },
      "AbstractPolicyRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "DecisionStrategy": {
            "enum": [
              "AFFIRMATIVE",
              "UNANIMOUS",
              "CONSENSUS"
            ],
            "type": "string",
            "description": "DecisionStrategy"
          },
          "Logic": {
            "enum": [
              "POSITIVE",
              "NEGATIVE"
            ],
            "type": "string",
            "description": "Logic"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Policies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Resources": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Owner": {
            "type": "string"
          },
          "ResourcesData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRepresentation"
            }
          },
          "ScopesData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeRepresentation"
            }
          }
        }
      },
      "ResourceRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "Uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Type": {
            "type": "string"
          },
          "Scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeRepresentation"
            }
          },
          "IconUri": {
            "type": "string"
          },
          "Owner": {
            "$ref": "#/components/schemas/ResourceOwnerRepresentation"
          },
          "OwnerManagedAccess": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "ResourceServerRepresentation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "ClientId": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "AllowRemoteResourceManagement": {
            "type": "boolean"
          },
          "PolicyEnforcementMode": {
            "enum": [
              "ENFORCING",
              "PERMISSIVE",
              "DISABLED"
            ],
            "type": "string",
            "description": "PolicyEnforcementMode"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRepresentation"
            }
          },
          "Policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRepresentation"
            }
          },
          "Scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeRepresentation"
            }
          },
          "DecisionStrategy": {
            "enum": [
              "AFFIRMATIVE",
              "UNANIMOUS",
              "CONSENSUS"
            ],
            "type": "string",
            "description": "DecisionStrategy"
          }
        }
      },
      "ScopeRepresentation": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "IconUri": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyRepresentation"
            }
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRepresentation"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "access_token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "access_token": [ ]
    }
  ]
}